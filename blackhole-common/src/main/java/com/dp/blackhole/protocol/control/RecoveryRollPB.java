// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RecoveryRoll.proto

package com.dp.blackhole.protocol.control;

public final class RecoveryRollPB {
  private RecoveryRollPB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class RecoveryRoll extends
      com.google.protobuf.GeneratedMessage {
    // Use RecoveryRoll.newBuilder() to construct.
    private RecoveryRoll() {
      initFields();
    }
    private RecoveryRoll(boolean noInit) {}
    
    private static final RecoveryRoll defaultInstance;
    public static RecoveryRoll getDefaultInstance() {
      return defaultInstance;
    }
    
    public RecoveryRoll getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dp.blackhole.protocol.control.RecoveryRollPB.internal_static_blackhole_RecoveryRoll_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dp.blackhole.protocol.control.RecoveryRollPB.internal_static_blackhole_RecoveryRoll_fieldAccessorTable;
    }
    
    // required string topic = 1;
    public static final int TOPIC_FIELD_NUMBER = 1;
    private boolean hasTopic;
    private java.lang.String topic_ = "";
    public boolean hasTopic() { return hasTopic; }
    public java.lang.String getTopic() { return topic_; }
    
    // required string broker_server = 2;
    public static final int BROKER_SERVER_FIELD_NUMBER = 2;
    private boolean hasBrokerServer;
    private java.lang.String brokerServer_ = "";
    public boolean hasBrokerServer() { return hasBrokerServer; }
    public java.lang.String getBrokerServer() { return brokerServer_; }
    
    // required int64 roll_ts = 3;
    public static final int ROLL_TS_FIELD_NUMBER = 3;
    private boolean hasRollTs;
    private long rollTs_ = 0L;
    public boolean hasRollTs() { return hasRollTs; }
    public long getRollTs() { return rollTs_; }
    
    // required int32 recovery_port = 4;
    public static final int RECOVERY_PORT_FIELD_NUMBER = 4;
    private boolean hasRecoveryPort;
    private int recoveryPort_ = 0;
    public boolean hasRecoveryPort() { return hasRecoveryPort; }
    public int getRecoveryPort() { return recoveryPort_; }
    
    // optional string instance_id = 5;
    public static final int INSTANCE_ID_FIELD_NUMBER = 5;
    private boolean hasInstanceId;
    private java.lang.String instanceId_ = "";
    public boolean hasInstanceId() { return hasInstanceId; }
    public java.lang.String getInstanceId() { return instanceId_; }
    
    // optional bool is_final = 6;
    public static final int IS_FINAL_FIELD_NUMBER = 6;
    private boolean hasIsFinal;
    private boolean isFinal_ = false;
    public boolean hasIsFinal() { return hasIsFinal; }
    public boolean getIsFinal() { return isFinal_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasTopic) return false;
      if (!hasBrokerServer) return false;
      if (!hasRollTs) return false;
      if (!hasRecoveryPort) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTopic()) {
        output.writeString(1, getTopic());
      }
      if (hasBrokerServer()) {
        output.writeString(2, getBrokerServer());
      }
      if (hasRollTs()) {
        output.writeInt64(3, getRollTs());
      }
      if (hasRecoveryPort()) {
        output.writeInt32(4, getRecoveryPort());
      }
      if (hasInstanceId()) {
        output.writeString(5, getInstanceId());
      }
      if (hasIsFinal()) {
        output.writeBool(6, getIsFinal());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTopic()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getTopic());
      }
      if (hasBrokerServer()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getBrokerServer());
      }
      if (hasRollTs()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, getRollTs());
      }
      if (hasRecoveryPort()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getRecoveryPort());
      }
      if (hasInstanceId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getInstanceId());
      }
      if (hasIsFinal()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, getIsFinal());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll result;
      
      // Construct using com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll();
        return builder;
      }
      
      protected com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll.getDescriptor();
      }
      
      public com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll getDefaultInstanceForType() {
        return com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll) {
          return mergeFrom((com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll other) {
        if (other == com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll.getDefaultInstance()) return this;
        if (other.hasTopic()) {
          setTopic(other.getTopic());
        }
        if (other.hasBrokerServer()) {
          setBrokerServer(other.getBrokerServer());
        }
        if (other.hasRollTs()) {
          setRollTs(other.getRollTs());
        }
        if (other.hasRecoveryPort()) {
          setRecoveryPort(other.getRecoveryPort());
        }
        if (other.hasInstanceId()) {
          setInstanceId(other.getInstanceId());
        }
        if (other.hasIsFinal()) {
          setIsFinal(other.getIsFinal());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setTopic(input.readString());
              break;
            }
            case 18: {
              setBrokerServer(input.readString());
              break;
            }
            case 24: {
              setRollTs(input.readInt64());
              break;
            }
            case 32: {
              setRecoveryPort(input.readInt32());
              break;
            }
            case 42: {
              setInstanceId(input.readString());
              break;
            }
            case 48: {
              setIsFinal(input.readBool());
              break;
            }
          }
        }
      }
      
      
      // required string topic = 1;
      public boolean hasTopic() {
        return result.hasTopic();
      }
      public java.lang.String getTopic() {
        return result.getTopic();
      }
      public Builder setTopic(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasTopic = true;
        result.topic_ = value;
        return this;
      }
      public Builder clearTopic() {
        result.hasTopic = false;
        result.topic_ = getDefaultInstance().getTopic();
        return this;
      }
      
      // required string broker_server = 2;
      public boolean hasBrokerServer() {
        return result.hasBrokerServer();
      }
      public java.lang.String getBrokerServer() {
        return result.getBrokerServer();
      }
      public Builder setBrokerServer(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasBrokerServer = true;
        result.brokerServer_ = value;
        return this;
      }
      public Builder clearBrokerServer() {
        result.hasBrokerServer = false;
        result.brokerServer_ = getDefaultInstance().getBrokerServer();
        return this;
      }
      
      // required int64 roll_ts = 3;
      public boolean hasRollTs() {
        return result.hasRollTs();
      }
      public long getRollTs() {
        return result.getRollTs();
      }
      public Builder setRollTs(long value) {
        result.hasRollTs = true;
        result.rollTs_ = value;
        return this;
      }
      public Builder clearRollTs() {
        result.hasRollTs = false;
        result.rollTs_ = 0L;
        return this;
      }
      
      // required int32 recovery_port = 4;
      public boolean hasRecoveryPort() {
        return result.hasRecoveryPort();
      }
      public int getRecoveryPort() {
        return result.getRecoveryPort();
      }
      public Builder setRecoveryPort(int value) {
        result.hasRecoveryPort = true;
        result.recoveryPort_ = value;
        return this;
      }
      public Builder clearRecoveryPort() {
        result.hasRecoveryPort = false;
        result.recoveryPort_ = 0;
        return this;
      }
      
      // optional string instance_id = 5;
      public boolean hasInstanceId() {
        return result.hasInstanceId();
      }
      public java.lang.String getInstanceId() {
        return result.getInstanceId();
      }
      public Builder setInstanceId(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasInstanceId = true;
        result.instanceId_ = value;
        return this;
      }
      public Builder clearInstanceId() {
        result.hasInstanceId = false;
        result.instanceId_ = getDefaultInstance().getInstanceId();
        return this;
      }
      
      // optional bool is_final = 6;
      public boolean hasIsFinal() {
        return result.hasIsFinal();
      }
      public boolean getIsFinal() {
        return result.getIsFinal();
      }
      public Builder setIsFinal(boolean value) {
        result.hasIsFinal = true;
        result.isFinal_ = value;
        return this;
      }
      public Builder clearIsFinal() {
        result.hasIsFinal = false;
        result.isFinal_ = false;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:blackhole.RecoveryRoll)
    }
    
    static {
      defaultInstance = new RecoveryRoll(true);
      com.dp.blackhole.protocol.control.RecoveryRollPB.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:blackhole.RecoveryRoll)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_blackhole_RecoveryRoll_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_blackhole_RecoveryRoll_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022RecoveryRoll.proto\022\tblackhole\"\203\001\n\014Reco" +
      "veryRoll\022\r\n\005topic\030\001 \002(\t\022\025\n\rbroker_server" +
      "\030\002 \002(\t\022\017\n\007roll_ts\030\003 \002(\003\022\025\n\rrecovery_port" +
      "\030\004 \002(\005\022\023\n\013instance_id\030\005 \001(\t\022\020\n\010is_final\030" +
      "\006 \001(\010B3\n!com.dp.blackhole.protocol.contr" +
      "olB\016RecoveryRollPB"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_blackhole_RecoveryRoll_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_blackhole_RecoveryRoll_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_blackhole_RecoveryRoll_descriptor,
              new java.lang.String[] { "Topic", "BrokerServer", "RollTs", "RecoveryPort", "InstanceId", "IsFinal", },
              com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll.class,
              com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
