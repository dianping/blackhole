// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuitAndClean.proto

package com.dp.blackhole.protocol.control;

public final class QuitAndCleanPB {
  private QuitAndCleanPB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class InstanceGroup extends
      com.google.protobuf.GeneratedMessage {
    // Use InstanceGroup.newBuilder() to construct.
    private InstanceGroup() {
      initFields();
    }
    private InstanceGroup(boolean noInit) {}
    
    private static final InstanceGroup defaultInstance;
    public static InstanceGroup getDefaultInstance() {
      return defaultInstance;
    }
    
    public InstanceGroup getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dp.blackhole.protocol.control.QuitAndCleanPB.internal_static_blackhole_InstanceGroup_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dp.blackhole.protocol.control.QuitAndCleanPB.internal_static_blackhole_InstanceGroup_fieldAccessorTable;
    }
    
    // required string topic = 1;
    public static final int TOPIC_FIELD_NUMBER = 1;
    private boolean hasTopic;
    private java.lang.String topic_ = "";
    public boolean hasTopic() { return hasTopic; }
    public java.lang.String getTopic() { return topic_; }
    
    // repeated string instance_ids = 2;
    public static final int INSTANCE_IDS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.String> instanceIds_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getInstanceIdsList() {
      return instanceIds_;
    }
    public int getInstanceIdsCount() { return instanceIds_.size(); }
    public java.lang.String getInstanceIds(int index) {
      return instanceIds_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasTopic) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTopic()) {
        output.writeString(1, getTopic());
      }
      for (java.lang.String element : getInstanceIdsList()) {
        output.writeString(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTopic()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getTopic());
      }
      {
        int dataSize = 0;
        for (java.lang.String element : getInstanceIdsList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getInstanceIdsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup result;
      
      // Construct using com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup();
        return builder;
      }
      
      protected com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup.getDescriptor();
      }
      
      public com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup getDefaultInstanceForType() {
        return com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.instanceIds_ != java.util.Collections.EMPTY_LIST) {
          result.instanceIds_ =
            java.util.Collections.unmodifiableList(result.instanceIds_);
        }
        com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup) {
          return mergeFrom((com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup other) {
        if (other == com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup.getDefaultInstance()) return this;
        if (other.hasTopic()) {
          setTopic(other.getTopic());
        }
        if (!other.instanceIds_.isEmpty()) {
          if (result.instanceIds_.isEmpty()) {
            result.instanceIds_ = new java.util.ArrayList<java.lang.String>();
          }
          result.instanceIds_.addAll(other.instanceIds_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setTopic(input.readString());
              break;
            }
            case 18: {
              addInstanceIds(input.readString());
              break;
            }
          }
        }
      }
      
      
      // required string topic = 1;
      public boolean hasTopic() {
        return result.hasTopic();
      }
      public java.lang.String getTopic() {
        return result.getTopic();
      }
      public Builder setTopic(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasTopic = true;
        result.topic_ = value;
        return this;
      }
      public Builder clearTopic() {
        result.hasTopic = false;
        result.topic_ = getDefaultInstance().getTopic();
        return this;
      }
      
      // repeated string instance_ids = 2;
      public java.util.List<java.lang.String> getInstanceIdsList() {
        return java.util.Collections.unmodifiableList(result.instanceIds_);
      }
      public int getInstanceIdsCount() {
        return result.getInstanceIdsCount();
      }
      public java.lang.String getInstanceIds(int index) {
        return result.getInstanceIds(index);
      }
      public Builder setInstanceIds(int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.instanceIds_.set(index, value);
        return this;
      }
      public Builder addInstanceIds(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  if (result.instanceIds_.isEmpty()) {
          result.instanceIds_ = new java.util.ArrayList<java.lang.String>();
        }
        result.instanceIds_.add(value);
        return this;
      }
      public Builder addAllInstanceIds(
          java.lang.Iterable<? extends java.lang.String> values) {
        if (result.instanceIds_.isEmpty()) {
          result.instanceIds_ = new java.util.ArrayList<java.lang.String>();
        }
        super.addAll(values, result.instanceIds_);
        return this;
      }
      public Builder clearInstanceIds() {
        result.instanceIds_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:blackhole.InstanceGroup)
    }
    
    static {
      defaultInstance = new InstanceGroup(true);
      com.dp.blackhole.protocol.control.QuitAndCleanPB.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:blackhole.InstanceGroup)
  }
  
  public static final class Quit extends
      com.google.protobuf.GeneratedMessage {
    // Use Quit.newBuilder() to construct.
    private Quit() {
      initFields();
    }
    private Quit(boolean noInit) {}
    
    private static final Quit defaultInstance;
    public static Quit getDefaultInstance() {
      return defaultInstance;
    }
    
    public Quit getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dp.blackhole.protocol.control.QuitAndCleanPB.internal_static_blackhole_Quit_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dp.blackhole.protocol.control.QuitAndCleanPB.internal_static_blackhole_Quit_fieldAccessorTable;
    }
    
    // repeated .blackhole.InstanceGroup instanceGroup = 1;
    public static final int INSTANCEGROUP_FIELD_NUMBER = 1;
    private java.util.List<com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup> instanceGroup_ =
      java.util.Collections.emptyList();
    public java.util.List<com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup> getInstanceGroupList() {
      return instanceGroup_;
    }
    public int getInstanceGroupCount() { return instanceGroup_.size(); }
    public com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup getInstanceGroup(int index) {
      return instanceGroup_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup element : getInstanceGroupList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup element : getInstanceGroupList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup element : getInstanceGroupList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit result;
      
      // Construct using com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit();
        return builder;
      }
      
      protected com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit.getDescriptor();
      }
      
      public com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit getDefaultInstanceForType() {
        return com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.instanceGroup_ != java.util.Collections.EMPTY_LIST) {
          result.instanceGroup_ =
            java.util.Collections.unmodifiableList(result.instanceGroup_);
        }
        com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit) {
          return mergeFrom((com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit other) {
        if (other == com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit.getDefaultInstance()) return this;
        if (!other.instanceGroup_.isEmpty()) {
          if (result.instanceGroup_.isEmpty()) {
            result.instanceGroup_ = new java.util.ArrayList<com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup>();
          }
          result.instanceGroup_.addAll(other.instanceGroup_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup.Builder subBuilder = com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addInstanceGroup(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .blackhole.InstanceGroup instanceGroup = 1;
      public java.util.List<com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup> getInstanceGroupList() {
        return java.util.Collections.unmodifiableList(result.instanceGroup_);
      }
      public int getInstanceGroupCount() {
        return result.getInstanceGroupCount();
      }
      public com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup getInstanceGroup(int index) {
        return result.getInstanceGroup(index);
      }
      public Builder setInstanceGroup(int index, com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.instanceGroup_.set(index, value);
        return this;
      }
      public Builder setInstanceGroup(int index, com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup.Builder builderForValue) {
        result.instanceGroup_.set(index, builderForValue.build());
        return this;
      }
      public Builder addInstanceGroup(com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.instanceGroup_.isEmpty()) {
          result.instanceGroup_ = new java.util.ArrayList<com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup>();
        }
        result.instanceGroup_.add(value);
        return this;
      }
      public Builder addInstanceGroup(com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup.Builder builderForValue) {
        if (result.instanceGroup_.isEmpty()) {
          result.instanceGroup_ = new java.util.ArrayList<com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup>();
        }
        result.instanceGroup_.add(builderForValue.build());
        return this;
      }
      public Builder addAllInstanceGroup(
          java.lang.Iterable<? extends com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup> values) {
        if (result.instanceGroup_.isEmpty()) {
          result.instanceGroup_ = new java.util.ArrayList<com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup>();
        }
        super.addAll(values, result.instanceGroup_);
        return this;
      }
      public Builder clearInstanceGroup() {
        result.instanceGroup_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:blackhole.Quit)
    }
    
    static {
      defaultInstance = new Quit(true);
      com.dp.blackhole.protocol.control.QuitAndCleanPB.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:blackhole.Quit)
  }
  
  public static final class Clean extends
      com.google.protobuf.GeneratedMessage {
    // Use Clean.newBuilder() to construct.
    private Clean() {
      initFields();
    }
    private Clean(boolean noInit) {}
    
    private static final Clean defaultInstance;
    public static Clean getDefaultInstance() {
      return defaultInstance;
    }
    
    public Clean getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dp.blackhole.protocol.control.QuitAndCleanPB.internal_static_blackhole_Clean_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dp.blackhole.protocol.control.QuitAndCleanPB.internal_static_blackhole_Clean_fieldAccessorTable;
    }
    
    // repeated .blackhole.InstanceGroup instanceGroup = 1;
    public static final int INSTANCEGROUP_FIELD_NUMBER = 1;
    private java.util.List<com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup> instanceGroup_ =
      java.util.Collections.emptyList();
    public java.util.List<com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup> getInstanceGroupList() {
      return instanceGroup_;
    }
    public int getInstanceGroupCount() { return instanceGroup_.size(); }
    public com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup getInstanceGroup(int index) {
      return instanceGroup_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup element : getInstanceGroupList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup element : getInstanceGroupList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup element : getInstanceGroupList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean result;
      
      // Construct using com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean();
        return builder;
      }
      
      protected com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean.getDescriptor();
      }
      
      public com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean getDefaultInstanceForType() {
        return com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.instanceGroup_ != java.util.Collections.EMPTY_LIST) {
          result.instanceGroup_ =
            java.util.Collections.unmodifiableList(result.instanceGroup_);
        }
        com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean) {
          return mergeFrom((com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean other) {
        if (other == com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean.getDefaultInstance()) return this;
        if (!other.instanceGroup_.isEmpty()) {
          if (result.instanceGroup_.isEmpty()) {
            result.instanceGroup_ = new java.util.ArrayList<com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup>();
          }
          result.instanceGroup_.addAll(other.instanceGroup_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup.Builder subBuilder = com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addInstanceGroup(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .blackhole.InstanceGroup instanceGroup = 1;
      public java.util.List<com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup> getInstanceGroupList() {
        return java.util.Collections.unmodifiableList(result.instanceGroup_);
      }
      public int getInstanceGroupCount() {
        return result.getInstanceGroupCount();
      }
      public com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup getInstanceGroup(int index) {
        return result.getInstanceGroup(index);
      }
      public Builder setInstanceGroup(int index, com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.instanceGroup_.set(index, value);
        return this;
      }
      public Builder setInstanceGroup(int index, com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup.Builder builderForValue) {
        result.instanceGroup_.set(index, builderForValue.build());
        return this;
      }
      public Builder addInstanceGroup(com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.instanceGroup_.isEmpty()) {
          result.instanceGroup_ = new java.util.ArrayList<com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup>();
        }
        result.instanceGroup_.add(value);
        return this;
      }
      public Builder addInstanceGroup(com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup.Builder builderForValue) {
        if (result.instanceGroup_.isEmpty()) {
          result.instanceGroup_ = new java.util.ArrayList<com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup>();
        }
        result.instanceGroup_.add(builderForValue.build());
        return this;
      }
      public Builder addAllInstanceGroup(
          java.lang.Iterable<? extends com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup> values) {
        if (result.instanceGroup_.isEmpty()) {
          result.instanceGroup_ = new java.util.ArrayList<com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup>();
        }
        super.addAll(values, result.instanceGroup_);
        return this;
      }
      public Builder clearInstanceGroup() {
        result.instanceGroup_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:blackhole.Clean)
    }
    
    static {
      defaultInstance = new Clean(true);
      com.dp.blackhole.protocol.control.QuitAndCleanPB.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:blackhole.Clean)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_blackhole_InstanceGroup_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_blackhole_InstanceGroup_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_blackhole_Quit_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_blackhole_Quit_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_blackhole_Clean_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_blackhole_Clean_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022QuitAndClean.proto\022\tblackhole\"4\n\rInsta" +
      "nceGroup\022\r\n\005topic\030\001 \002(\t\022\024\n\014instance_ids\030" +
      "\002 \003(\t\"7\n\004Quit\022/\n\rinstanceGroup\030\001 \003(\0132\030.b" +
      "lackhole.InstanceGroup\"8\n\005Clean\022/\n\rinsta" +
      "nceGroup\030\001 \003(\0132\030.blackhole.InstanceGroup" +
      "B3\n!com.dp.blackhole.protocol.controlB\016Q" +
      "uitAndCleanPB"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_blackhole_InstanceGroup_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_blackhole_InstanceGroup_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_blackhole_InstanceGroup_descriptor,
              new java.lang.String[] { "Topic", "InstanceIds", },
              com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup.class,
              com.dp.blackhole.protocol.control.QuitAndCleanPB.InstanceGroup.Builder.class);
          internal_static_blackhole_Quit_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_blackhole_Quit_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_blackhole_Quit_descriptor,
              new java.lang.String[] { "InstanceGroup", },
              com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit.class,
              com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit.Builder.class);
          internal_static_blackhole_Clean_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_blackhole_Clean_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_blackhole_Clean_descriptor,
              new java.lang.String[] { "InstanceGroup", },
              com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean.class,
              com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
