// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

package com.dp.blackhole.protocol.control;

public final class MessagePB {
  private MessagePB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class Message extends
      com.google.protobuf.GeneratedMessage {
    // Use Message.newBuilder() to construct.
    private Message() {
      initFields();
    }
    private Message(boolean noInit) {}
    
    private static final Message defaultInstance;
    public static Message getDefaultInstance() {
      return defaultInstance;
    }
    
    public Message getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dp.blackhole.protocol.control.MessagePB.internal_static_blackhole_Message_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dp.blackhole.protocol.control.MessagePB.internal_static_blackhole_Message_fieldAccessorTable;
    }
    
    public enum MessageType
        implements com.google.protobuf.ProtocolMessageEnum {
      HEARTBEART(0, 1),
      APP_REG(1, 2),
      BROKER_REG(2, 3),
      ASSIGN_BROKER(3, 4),
      READY_BROKER(4, 5),
      APP_ROLL(5, 6),
      UPLOAD_ROLL(6, 7),
      UPLOAD_SUCCESS(7, 8),
      UPLOAD_FAIL(8, 9),
      RECOVERY_ROLL(9, 10),
      RECOVERY_SUCCESS(10, 11),
      RECOVERY_FAIL(11, 12),
      FAILURE(12, 13),
      NOAVAILABLENODE(13, 14),
      UNRECOVERABLE(14, 15),
      MANUAL_RECOVERY_ROLL(15, 16),
      DUMPSTAT(16, 17),
      RETIRESTREAM(17, 18),
      CONF_REQ(18, 19),
      CONF_RES(19, 20),
      NOAVAILABLECONF(20, 21),
      DUMPCONF(21, 22),
      DUMPREPLY(22, 23),
      LISTAPPS(23, 24),
      REMOVE_CONF(24, 25),
      DUMP_APP(25, 26),
      CONSUMER_REG(26, 27),
      ASSIGN_CONSUMER(27, 28),
      OFFSET_COMMIT(28, 29),
      TOPICREPORT(29, 30),
      CONSUMERREGFAIL(30, 31),
      MAKR_UNRECOVERABLE(31, 32),
      LISTIDLE(32, 33),
      RESTART(33, 34),
      QUIT(34, 35),
      CLEAN(35, 36),
      ROLL_CLEAN(36, 37),
      DUMP_CONSUMER_GROUP(37, 38),
      LIST_CONSUMER_GROUP(38, 39),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static MessageType valueOf(int value) {
        switch (value) {
          case 1: return HEARTBEART;
          case 2: return APP_REG;
          case 3: return BROKER_REG;
          case 4: return ASSIGN_BROKER;
          case 5: return READY_BROKER;
          case 6: return APP_ROLL;
          case 7: return UPLOAD_ROLL;
          case 8: return UPLOAD_SUCCESS;
          case 9: return UPLOAD_FAIL;
          case 10: return RECOVERY_ROLL;
          case 11: return RECOVERY_SUCCESS;
          case 12: return RECOVERY_FAIL;
          case 13: return FAILURE;
          case 14: return NOAVAILABLENODE;
          case 15: return UNRECOVERABLE;
          case 16: return MANUAL_RECOVERY_ROLL;
          case 17: return DUMPSTAT;
          case 18: return RETIRESTREAM;
          case 19: return CONF_REQ;
          case 20: return CONF_RES;
          case 21: return NOAVAILABLECONF;
          case 22: return DUMPCONF;
          case 23: return DUMPREPLY;
          case 24: return LISTAPPS;
          case 25: return REMOVE_CONF;
          case 26: return DUMP_APP;
          case 27: return CONSUMER_REG;
          case 28: return ASSIGN_CONSUMER;
          case 29: return OFFSET_COMMIT;
          case 30: return TOPICREPORT;
          case 31: return CONSUMERREGFAIL;
          case 32: return MAKR_UNRECOVERABLE;
          case 33: return LISTIDLE;
          case 34: return RESTART;
          case 35: return QUIT;
          case 36: return CLEAN;
          case 37: return ROLL_CLEAN;
          case 38: return DUMP_CONSUMER_GROUP;
          case 39: return LIST_CONSUMER_GROUP;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<MessageType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<MessageType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MessageType>() {
              public MessageType findValueByNumber(int number) {
                return MessageType.valueOf(number)
      ;        }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.dp.blackhole.protocol.control.MessagePB.Message.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final MessageType[] VALUES = {
        HEARTBEART, APP_REG, BROKER_REG, ASSIGN_BROKER, READY_BROKER, APP_ROLL, UPLOAD_ROLL, UPLOAD_SUCCESS, UPLOAD_FAIL, RECOVERY_ROLL, RECOVERY_SUCCESS, RECOVERY_FAIL, FAILURE, NOAVAILABLENODE, UNRECOVERABLE, MANUAL_RECOVERY_ROLL, DUMPSTAT, RETIRESTREAM, CONF_REQ, CONF_RES, NOAVAILABLECONF, DUMPCONF, DUMPREPLY, LISTAPPS, REMOVE_CONF, DUMP_APP, CONSUMER_REG, ASSIGN_CONSUMER, OFFSET_COMMIT, TOPICREPORT, CONSUMERREGFAIL, MAKR_UNRECOVERABLE, LISTIDLE, RESTART, QUIT, CLEAN, ROLL_CLEAN, DUMP_CONSUMER_GROUP, LIST_CONSUMER_GROUP, 
      };
      public static MessageType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private MessageType(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        com.dp.blackhole.protocol.control.MessagePB.getDescriptor();
      }
      
      // @@protoc_insertion_point(enum_scope:blackhole.Message.MessageType)
    }
    
    // required .blackhole.Message.MessageType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private boolean hasType;
    private com.dp.blackhole.protocol.control.MessagePB.Message.MessageType type_;
    public boolean hasType() { return hasType; }
    public com.dp.blackhole.protocol.control.MessagePB.Message.MessageType getType() { return type_; }
    
    // optional .blackhole.AppReg appReg = 2;
    public static final int APPREG_FIELD_NUMBER = 2;
    private boolean hasAppReg;
    private com.dp.blackhole.protocol.control.AppRegPB.AppReg appReg_;
    public boolean hasAppReg() { return hasAppReg; }
    public com.dp.blackhole.protocol.control.AppRegPB.AppReg getAppReg() { return appReg_; }
    
    // optional .blackhole.AssignBroker assignBroker = 3;
    public static final int ASSIGNBROKER_FIELD_NUMBER = 3;
    private boolean hasAssignBroker;
    private com.dp.blackhole.protocol.control.AssignBrokerPB.AssignBroker assignBroker_;
    public boolean hasAssignBroker() { return hasAssignBroker; }
    public com.dp.blackhole.protocol.control.AssignBrokerPB.AssignBroker getAssignBroker() { return assignBroker_; }
    
    // optional .blackhole.AppRoll appRoll = 4;
    public static final int APPROLL_FIELD_NUMBER = 4;
    private boolean hasAppRoll;
    private com.dp.blackhole.protocol.control.AppRollPB.AppRoll appRoll_;
    public boolean hasAppRoll() { return hasAppRoll; }
    public com.dp.blackhole.protocol.control.AppRollPB.AppRoll getAppRoll() { return appRoll_; }
    
    // optional .blackhole.RecoveryRoll recoveryRoll = 5;
    public static final int RECOVERYROLL_FIELD_NUMBER = 5;
    private boolean hasRecoveryRoll;
    private com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll recoveryRoll_;
    public boolean hasRecoveryRoll() { return hasRecoveryRoll; }
    public com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll getRecoveryRoll() { return recoveryRoll_; }
    
    // optional .blackhole.ReadyBroker readyBroker = 6;
    public static final int READYBROKER_FIELD_NUMBER = 6;
    private boolean hasReadyBroker;
    private com.dp.blackhole.protocol.control.ReadyBrokerPB.ReadyBroker readyBroker_;
    public boolean hasReadyBroker() { return hasReadyBroker; }
    public com.dp.blackhole.protocol.control.ReadyBrokerPB.ReadyBroker getReadyBroker() { return readyBroker_; }
    
    // optional .blackhole.RollID rollID = 7;
    public static final int ROLLID_FIELD_NUMBER = 7;
    private boolean hasRollID;
    private com.dp.blackhole.protocol.control.RollIDPB.RollID rollID_;
    public boolean hasRollID() { return hasRollID; }
    public com.dp.blackhole.protocol.control.RollIDPB.RollID getRollID() { return rollID_; }
    
    // optional .blackhole.Failure failure = 8;
    public static final int FAILURE_FIELD_NUMBER = 8;
    private boolean hasFailure;
    private com.dp.blackhole.protocol.control.FailurePB.Failure failure_;
    public boolean hasFailure() { return hasFailure; }
    public com.dp.blackhole.protocol.control.FailurePB.Failure getFailure() { return failure_; }
    
    // optional .blackhole.NoAvailableNode noAvailableNode = 9;
    public static final int NOAVAILABLENODE_FIELD_NUMBER = 9;
    private boolean hasNoAvailableNode;
    private com.dp.blackhole.protocol.control.NoAvailableNodePB.NoAvailableNode noAvailableNode_;
    public boolean hasNoAvailableNode() { return hasNoAvailableNode; }
    public com.dp.blackhole.protocol.control.NoAvailableNodePB.NoAvailableNode getNoAvailableNode() { return noAvailableNode_; }
    
    // optional .blackhole.StreamID streamId = 10;
    public static final int STREAMID_FIELD_NUMBER = 10;
    private boolean hasStreamId;
    private com.dp.blackhole.protocol.control.StreamIDPB.StreamID streamId_;
    public boolean hasStreamId() { return hasStreamId; }
    public com.dp.blackhole.protocol.control.StreamIDPB.StreamID getStreamId() { return streamId_; }
    
    // optional .blackhole.ConfRes confRes = 11;
    public static final int CONFRES_FIELD_NUMBER = 11;
    private boolean hasConfRes;
    private com.dp.blackhole.protocol.control.ConfResPB.ConfRes confRes_;
    public boolean hasConfRes() { return hasConfRes; }
    public com.dp.blackhole.protocol.control.ConfResPB.ConfRes getConfRes() { return confRes_; }
    
    // optional .blackhole.DumpReply dumpReply = 12;
    public static final int DUMPREPLY_FIELD_NUMBER = 12;
    private boolean hasDumpReply;
    private com.dp.blackhole.protocol.control.DumpReplyPB.DumpReply dumpReply_;
    public boolean hasDumpReply() { return hasDumpReply; }
    public com.dp.blackhole.protocol.control.DumpReplyPB.DumpReply getDumpReply() { return dumpReply_; }
    
    // optional .blackhole.RemoveConf removeConf = 13;
    public static final int REMOVECONF_FIELD_NUMBER = 13;
    private boolean hasRemoveConf;
    private com.dp.blackhole.protocol.control.RemoveConfPB.RemoveConf removeConf_;
    public boolean hasRemoveConf() { return hasRemoveConf; }
    public com.dp.blackhole.protocol.control.RemoveConfPB.RemoveConf getRemoveConf() { return removeConf_; }
    
    // optional .blackhole.BrokerReg brokerReg = 14;
    public static final int BROKERREG_FIELD_NUMBER = 14;
    private boolean hasBrokerReg;
    private com.dp.blackhole.protocol.control.BrokerRegPB.BrokerReg brokerReg_;
    public boolean hasBrokerReg() { return hasBrokerReg; }
    public com.dp.blackhole.protocol.control.BrokerRegPB.BrokerReg getBrokerReg() { return brokerReg_; }
    
    // optional .blackhole.DumpApp dumpApp = 15;
    public static final int DUMPAPP_FIELD_NUMBER = 15;
    private boolean hasDumpApp;
    private com.dp.blackhole.protocol.control.DumpAppPB.DumpApp dumpApp_;
    public boolean hasDumpApp() { return hasDumpApp; }
    public com.dp.blackhole.protocol.control.DumpAppPB.DumpApp getDumpApp() { return dumpApp_; }
    
    // optional .blackhole.ConsumerReg consumerReg = 16;
    public static final int CONSUMERREG_FIELD_NUMBER = 16;
    private boolean hasConsumerReg;
    private com.dp.blackhole.protocol.control.ConsumerRegPB.ConsumerReg consumerReg_;
    public boolean hasConsumerReg() { return hasConsumerReg; }
    public com.dp.blackhole.protocol.control.ConsumerRegPB.ConsumerReg getConsumerReg() { return consumerReg_; }
    
    // optional .blackhole.AssignConsumer assignConsumer = 17;
    public static final int ASSIGNCONSUMER_FIELD_NUMBER = 17;
    private boolean hasAssignConsumer;
    private com.dp.blackhole.protocol.control.AssignConsumerPB.AssignConsumer assignConsumer_;
    public boolean hasAssignConsumer() { return hasAssignConsumer; }
    public com.dp.blackhole.protocol.control.AssignConsumerPB.AssignConsumer getAssignConsumer() { return assignConsumer_; }
    
    // optional .blackhole.OffsetCommit offsetCommit = 18;
    public static final int OFFSETCOMMIT_FIELD_NUMBER = 18;
    private boolean hasOffsetCommit;
    private com.dp.blackhole.protocol.control.OffsetCommitPB.OffsetCommit offsetCommit_;
    public boolean hasOffsetCommit() { return hasOffsetCommit; }
    public com.dp.blackhole.protocol.control.OffsetCommitPB.OffsetCommit getOffsetCommit() { return offsetCommit_; }
    
    // optional .blackhole.TopicReport topicReport = 19;
    public static final int TOPICREPORT_FIELD_NUMBER = 19;
    private boolean hasTopicReport;
    private com.dp.blackhole.protocol.control.TopicReportPB.TopicReport topicReport_;
    public boolean hasTopicReport() { return hasTopicReport; }
    public com.dp.blackhole.protocol.control.TopicReportPB.TopicReport getTopicReport() { return topicReport_; }
    
    // optional .blackhole.Restart restart = 20;
    public static final int RESTART_FIELD_NUMBER = 20;
    private boolean hasRestart;
    private com.dp.blackhole.protocol.control.RestartPB.Restart restart_;
    public boolean hasRestart() { return hasRestart; }
    public com.dp.blackhole.protocol.control.RestartPB.Restart getRestart() { return restart_; }
    
    // optional .blackhole.Quit quit = 21;
    public static final int QUIT_FIELD_NUMBER = 21;
    private boolean hasQuit;
    private com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit quit_;
    public boolean hasQuit() { return hasQuit; }
    public com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit getQuit() { return quit_; }
    
    // optional .blackhole.Clean clean = 22;
    public static final int CLEAN_FIELD_NUMBER = 22;
    private boolean hasClean;
    private com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean clean_;
    public boolean hasClean() { return hasClean; }
    public com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean getClean() { return clean_; }
    
    // optional .blackhole.RollClean rollClean = 23;
    public static final int ROLLCLEAN_FIELD_NUMBER = 23;
    private boolean hasRollClean;
    private com.dp.blackhole.protocol.control.RollCleanPB.RollClean rollClean_;
    public boolean hasRollClean() { return hasRollClean; }
    public com.dp.blackhole.protocol.control.RollCleanPB.RollClean getRollClean() { return rollClean_; }
    
    // optional .blackhole.DumpConsumerGroup dumpConsumerGroup = 24;
    public static final int DUMPCONSUMERGROUP_FIELD_NUMBER = 24;
    private boolean hasDumpConsumerGroup;
    private com.dp.blackhole.protocol.control.DumpConsumerGroupPB.DumpConsumerGroup dumpConsumerGroup_;
    public boolean hasDumpConsumerGroup() { return hasDumpConsumerGroup; }
    public com.dp.blackhole.protocol.control.DumpConsumerGroupPB.DumpConsumerGroup getDumpConsumerGroup() { return dumpConsumerGroup_; }
    
    private void initFields() {
      type_ = com.dp.blackhole.protocol.control.MessagePB.Message.MessageType.HEARTBEART;
      appReg_ = com.dp.blackhole.protocol.control.AppRegPB.AppReg.getDefaultInstance();
      assignBroker_ = com.dp.blackhole.protocol.control.AssignBrokerPB.AssignBroker.getDefaultInstance();
      appRoll_ = com.dp.blackhole.protocol.control.AppRollPB.AppRoll.getDefaultInstance();
      recoveryRoll_ = com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll.getDefaultInstance();
      readyBroker_ = com.dp.blackhole.protocol.control.ReadyBrokerPB.ReadyBroker.getDefaultInstance();
      rollID_ = com.dp.blackhole.protocol.control.RollIDPB.RollID.getDefaultInstance();
      failure_ = com.dp.blackhole.protocol.control.FailurePB.Failure.getDefaultInstance();
      noAvailableNode_ = com.dp.blackhole.protocol.control.NoAvailableNodePB.NoAvailableNode.getDefaultInstance();
      streamId_ = com.dp.blackhole.protocol.control.StreamIDPB.StreamID.getDefaultInstance();
      confRes_ = com.dp.blackhole.protocol.control.ConfResPB.ConfRes.getDefaultInstance();
      dumpReply_ = com.dp.blackhole.protocol.control.DumpReplyPB.DumpReply.getDefaultInstance();
      removeConf_ = com.dp.blackhole.protocol.control.RemoveConfPB.RemoveConf.getDefaultInstance();
      brokerReg_ = com.dp.blackhole.protocol.control.BrokerRegPB.BrokerReg.getDefaultInstance();
      dumpApp_ = com.dp.blackhole.protocol.control.DumpAppPB.DumpApp.getDefaultInstance();
      consumerReg_ = com.dp.blackhole.protocol.control.ConsumerRegPB.ConsumerReg.getDefaultInstance();
      assignConsumer_ = com.dp.blackhole.protocol.control.AssignConsumerPB.AssignConsumer.getDefaultInstance();
      offsetCommit_ = com.dp.blackhole.protocol.control.OffsetCommitPB.OffsetCommit.getDefaultInstance();
      topicReport_ = com.dp.blackhole.protocol.control.TopicReportPB.TopicReport.getDefaultInstance();
      restart_ = com.dp.blackhole.protocol.control.RestartPB.Restart.getDefaultInstance();
      quit_ = com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit.getDefaultInstance();
      clean_ = com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean.getDefaultInstance();
      rollClean_ = com.dp.blackhole.protocol.control.RollCleanPB.RollClean.getDefaultInstance();
      dumpConsumerGroup_ = com.dp.blackhole.protocol.control.DumpConsumerGroupPB.DumpConsumerGroup.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasType) return false;
      if (hasAppReg()) {
        if (!getAppReg().isInitialized()) return false;
      }
      if (hasAssignBroker()) {
        if (!getAssignBroker().isInitialized()) return false;
      }
      if (hasAppRoll()) {
        if (!getAppRoll().isInitialized()) return false;
      }
      if (hasRecoveryRoll()) {
        if (!getRecoveryRoll().isInitialized()) return false;
      }
      if (hasReadyBroker()) {
        if (!getReadyBroker().isInitialized()) return false;
      }
      if (hasRollID()) {
        if (!getRollID().isInitialized()) return false;
      }
      if (hasFailure()) {
        if (!getFailure().isInitialized()) return false;
      }
      if (hasNoAvailableNode()) {
        if (!getNoAvailableNode().isInitialized()) return false;
      }
      if (hasStreamId()) {
        if (!getStreamId().isInitialized()) return false;
      }
      if (hasConfRes()) {
        if (!getConfRes().isInitialized()) return false;
      }
      if (hasDumpReply()) {
        if (!getDumpReply().isInitialized()) return false;
      }
      if (hasRemoveConf()) {
        if (!getRemoveConf().isInitialized()) return false;
      }
      if (hasBrokerReg()) {
        if (!getBrokerReg().isInitialized()) return false;
      }
      if (hasDumpApp()) {
        if (!getDumpApp().isInitialized()) return false;
      }
      if (hasConsumerReg()) {
        if (!getConsumerReg().isInitialized()) return false;
      }
      if (hasAssignConsumer()) {
        if (!getAssignConsumer().isInitialized()) return false;
      }
      if (hasOffsetCommit()) {
        if (!getOffsetCommit().isInitialized()) return false;
      }
      if (hasTopicReport()) {
        if (!getTopicReport().isInitialized()) return false;
      }
      if (hasQuit()) {
        if (!getQuit().isInitialized()) return false;
      }
      if (hasClean()) {
        if (!getClean().isInitialized()) return false;
      }
      if (hasRollClean()) {
        if (!getRollClean().isInitialized()) return false;
      }
      if (hasDumpConsumerGroup()) {
        if (!getDumpConsumerGroup().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasType()) {
        output.writeEnum(1, getType().getNumber());
      }
      if (hasAppReg()) {
        output.writeMessage(2, getAppReg());
      }
      if (hasAssignBroker()) {
        output.writeMessage(3, getAssignBroker());
      }
      if (hasAppRoll()) {
        output.writeMessage(4, getAppRoll());
      }
      if (hasRecoveryRoll()) {
        output.writeMessage(5, getRecoveryRoll());
      }
      if (hasReadyBroker()) {
        output.writeMessage(6, getReadyBroker());
      }
      if (hasRollID()) {
        output.writeMessage(7, getRollID());
      }
      if (hasFailure()) {
        output.writeMessage(8, getFailure());
      }
      if (hasNoAvailableNode()) {
        output.writeMessage(9, getNoAvailableNode());
      }
      if (hasStreamId()) {
        output.writeMessage(10, getStreamId());
      }
      if (hasConfRes()) {
        output.writeMessage(11, getConfRes());
      }
      if (hasDumpReply()) {
        output.writeMessage(12, getDumpReply());
      }
      if (hasRemoveConf()) {
        output.writeMessage(13, getRemoveConf());
      }
      if (hasBrokerReg()) {
        output.writeMessage(14, getBrokerReg());
      }
      if (hasDumpApp()) {
        output.writeMessage(15, getDumpApp());
      }
      if (hasConsumerReg()) {
        output.writeMessage(16, getConsumerReg());
      }
      if (hasAssignConsumer()) {
        output.writeMessage(17, getAssignConsumer());
      }
      if (hasOffsetCommit()) {
        output.writeMessage(18, getOffsetCommit());
      }
      if (hasTopicReport()) {
        output.writeMessage(19, getTopicReport());
      }
      if (hasRestart()) {
        output.writeMessage(20, getRestart());
      }
      if (hasQuit()) {
        output.writeMessage(21, getQuit());
      }
      if (hasClean()) {
        output.writeMessage(22, getClean());
      }
      if (hasRollClean()) {
        output.writeMessage(23, getRollClean());
      }
      if (hasDumpConsumerGroup()) {
        output.writeMessage(24, getDumpConsumerGroup());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, getType().getNumber());
      }
      if (hasAppReg()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getAppReg());
      }
      if (hasAssignBroker()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getAssignBroker());
      }
      if (hasAppRoll()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getAppRoll());
      }
      if (hasRecoveryRoll()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getRecoveryRoll());
      }
      if (hasReadyBroker()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getReadyBroker());
      }
      if (hasRollID()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getRollID());
      }
      if (hasFailure()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getFailure());
      }
      if (hasNoAvailableNode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getNoAvailableNode());
      }
      if (hasStreamId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getStreamId());
      }
      if (hasConfRes()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getConfRes());
      }
      if (hasDumpReply()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getDumpReply());
      }
      if (hasRemoveConf()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getRemoveConf());
      }
      if (hasBrokerReg()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getBrokerReg());
      }
      if (hasDumpApp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, getDumpApp());
      }
      if (hasConsumerReg()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, getConsumerReg());
      }
      if (hasAssignConsumer()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getAssignConsumer());
      }
      if (hasOffsetCommit()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, getOffsetCommit());
      }
      if (hasTopicReport()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, getTopicReport());
      }
      if (hasRestart()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, getRestart());
      }
      if (hasQuit()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, getQuit());
      }
      if (hasClean()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, getClean());
      }
      if (hasRollClean()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, getRollClean());
      }
      if (hasDumpConsumerGroup()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, getDumpConsumerGroup());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.dp.blackhole.protocol.control.MessagePB.Message parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.MessagePB.Message parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.MessagePB.Message parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.MessagePB.Message parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.MessagePB.Message parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.MessagePB.Message parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.MessagePB.Message parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.dp.blackhole.protocol.control.MessagePB.Message parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.dp.blackhole.protocol.control.MessagePB.Message parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.MessagePB.Message parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dp.blackhole.protocol.control.MessagePB.Message prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.dp.blackhole.protocol.control.MessagePB.Message result;
      
      // Construct using com.dp.blackhole.protocol.control.MessagePB.Message.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.dp.blackhole.protocol.control.MessagePB.Message();
        return builder;
      }
      
      protected com.dp.blackhole.protocol.control.MessagePB.Message internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.dp.blackhole.protocol.control.MessagePB.Message();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dp.blackhole.protocol.control.MessagePB.Message.getDescriptor();
      }
      
      public com.dp.blackhole.protocol.control.MessagePB.Message getDefaultInstanceForType() {
        return com.dp.blackhole.protocol.control.MessagePB.Message.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.dp.blackhole.protocol.control.MessagePB.Message build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.dp.blackhole.protocol.control.MessagePB.Message buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.dp.blackhole.protocol.control.MessagePB.Message buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.dp.blackhole.protocol.control.MessagePB.Message returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dp.blackhole.protocol.control.MessagePB.Message) {
          return mergeFrom((com.dp.blackhole.protocol.control.MessagePB.Message)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.dp.blackhole.protocol.control.MessagePB.Message other) {
        if (other == com.dp.blackhole.protocol.control.MessagePB.Message.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasAppReg()) {
          mergeAppReg(other.getAppReg());
        }
        if (other.hasAssignBroker()) {
          mergeAssignBroker(other.getAssignBroker());
        }
        if (other.hasAppRoll()) {
          mergeAppRoll(other.getAppRoll());
        }
        if (other.hasRecoveryRoll()) {
          mergeRecoveryRoll(other.getRecoveryRoll());
        }
        if (other.hasReadyBroker()) {
          mergeReadyBroker(other.getReadyBroker());
        }
        if (other.hasRollID()) {
          mergeRollID(other.getRollID());
        }
        if (other.hasFailure()) {
          mergeFailure(other.getFailure());
        }
        if (other.hasNoAvailableNode()) {
          mergeNoAvailableNode(other.getNoAvailableNode());
        }
        if (other.hasStreamId()) {
          mergeStreamId(other.getStreamId());
        }
        if (other.hasConfRes()) {
          mergeConfRes(other.getConfRes());
        }
        if (other.hasDumpReply()) {
          mergeDumpReply(other.getDumpReply());
        }
        if (other.hasRemoveConf()) {
          mergeRemoveConf(other.getRemoveConf());
        }
        if (other.hasBrokerReg()) {
          mergeBrokerReg(other.getBrokerReg());
        }
        if (other.hasDumpApp()) {
          mergeDumpApp(other.getDumpApp());
        }
        if (other.hasConsumerReg()) {
          mergeConsumerReg(other.getConsumerReg());
        }
        if (other.hasAssignConsumer()) {
          mergeAssignConsumer(other.getAssignConsumer());
        }
        if (other.hasOffsetCommit()) {
          mergeOffsetCommit(other.getOffsetCommit());
        }
        if (other.hasTopicReport()) {
          mergeTopicReport(other.getTopicReport());
        }
        if (other.hasRestart()) {
          mergeRestart(other.getRestart());
        }
        if (other.hasQuit()) {
          mergeQuit(other.getQuit());
        }
        if (other.hasClean()) {
          mergeClean(other.getClean());
        }
        if (other.hasRollClean()) {
          mergeRollClean(other.getRollClean());
        }
        if (other.hasDumpConsumerGroup()) {
          mergeDumpConsumerGroup(other.getDumpConsumerGroup());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.dp.blackhole.protocol.control.MessagePB.Message.MessageType value = com.dp.blackhole.protocol.control.MessagePB.Message.MessageType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                setType(value);
              }
              break;
            }
            case 18: {
              com.dp.blackhole.protocol.control.AppRegPB.AppReg.Builder subBuilder = com.dp.blackhole.protocol.control.AppRegPB.AppReg.newBuilder();
              if (hasAppReg()) {
                subBuilder.mergeFrom(getAppReg());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setAppReg(subBuilder.buildPartial());
              break;
            }
            case 26: {
              com.dp.blackhole.protocol.control.AssignBrokerPB.AssignBroker.Builder subBuilder = com.dp.blackhole.protocol.control.AssignBrokerPB.AssignBroker.newBuilder();
              if (hasAssignBroker()) {
                subBuilder.mergeFrom(getAssignBroker());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setAssignBroker(subBuilder.buildPartial());
              break;
            }
            case 34: {
              com.dp.blackhole.protocol.control.AppRollPB.AppRoll.Builder subBuilder = com.dp.blackhole.protocol.control.AppRollPB.AppRoll.newBuilder();
              if (hasAppRoll()) {
                subBuilder.mergeFrom(getAppRoll());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setAppRoll(subBuilder.buildPartial());
              break;
            }
            case 42: {
              com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll.Builder subBuilder = com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll.newBuilder();
              if (hasRecoveryRoll()) {
                subBuilder.mergeFrom(getRecoveryRoll());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRecoveryRoll(subBuilder.buildPartial());
              break;
            }
            case 50: {
              com.dp.blackhole.protocol.control.ReadyBrokerPB.ReadyBroker.Builder subBuilder = com.dp.blackhole.protocol.control.ReadyBrokerPB.ReadyBroker.newBuilder();
              if (hasReadyBroker()) {
                subBuilder.mergeFrom(getReadyBroker());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setReadyBroker(subBuilder.buildPartial());
              break;
            }
            case 58: {
              com.dp.blackhole.protocol.control.RollIDPB.RollID.Builder subBuilder = com.dp.blackhole.protocol.control.RollIDPB.RollID.newBuilder();
              if (hasRollID()) {
                subBuilder.mergeFrom(getRollID());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRollID(subBuilder.buildPartial());
              break;
            }
            case 66: {
              com.dp.blackhole.protocol.control.FailurePB.Failure.Builder subBuilder = com.dp.blackhole.protocol.control.FailurePB.Failure.newBuilder();
              if (hasFailure()) {
                subBuilder.mergeFrom(getFailure());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFailure(subBuilder.buildPartial());
              break;
            }
            case 74: {
              com.dp.blackhole.protocol.control.NoAvailableNodePB.NoAvailableNode.Builder subBuilder = com.dp.blackhole.protocol.control.NoAvailableNodePB.NoAvailableNode.newBuilder();
              if (hasNoAvailableNode()) {
                subBuilder.mergeFrom(getNoAvailableNode());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setNoAvailableNode(subBuilder.buildPartial());
              break;
            }
            case 82: {
              com.dp.blackhole.protocol.control.StreamIDPB.StreamID.Builder subBuilder = com.dp.blackhole.protocol.control.StreamIDPB.StreamID.newBuilder();
              if (hasStreamId()) {
                subBuilder.mergeFrom(getStreamId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setStreamId(subBuilder.buildPartial());
              break;
            }
            case 90: {
              com.dp.blackhole.protocol.control.ConfResPB.ConfRes.Builder subBuilder = com.dp.blackhole.protocol.control.ConfResPB.ConfRes.newBuilder();
              if (hasConfRes()) {
                subBuilder.mergeFrom(getConfRes());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setConfRes(subBuilder.buildPartial());
              break;
            }
            case 98: {
              com.dp.blackhole.protocol.control.DumpReplyPB.DumpReply.Builder subBuilder = com.dp.blackhole.protocol.control.DumpReplyPB.DumpReply.newBuilder();
              if (hasDumpReply()) {
                subBuilder.mergeFrom(getDumpReply());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setDumpReply(subBuilder.buildPartial());
              break;
            }
            case 106: {
              com.dp.blackhole.protocol.control.RemoveConfPB.RemoveConf.Builder subBuilder = com.dp.blackhole.protocol.control.RemoveConfPB.RemoveConf.newBuilder();
              if (hasRemoveConf()) {
                subBuilder.mergeFrom(getRemoveConf());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRemoveConf(subBuilder.buildPartial());
              break;
            }
            case 114: {
              com.dp.blackhole.protocol.control.BrokerRegPB.BrokerReg.Builder subBuilder = com.dp.blackhole.protocol.control.BrokerRegPB.BrokerReg.newBuilder();
              if (hasBrokerReg()) {
                subBuilder.mergeFrom(getBrokerReg());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setBrokerReg(subBuilder.buildPartial());
              break;
            }
            case 122: {
              com.dp.blackhole.protocol.control.DumpAppPB.DumpApp.Builder subBuilder = com.dp.blackhole.protocol.control.DumpAppPB.DumpApp.newBuilder();
              if (hasDumpApp()) {
                subBuilder.mergeFrom(getDumpApp());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setDumpApp(subBuilder.buildPartial());
              break;
            }
            case 130: {
              com.dp.blackhole.protocol.control.ConsumerRegPB.ConsumerReg.Builder subBuilder = com.dp.blackhole.protocol.control.ConsumerRegPB.ConsumerReg.newBuilder();
              if (hasConsumerReg()) {
                subBuilder.mergeFrom(getConsumerReg());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setConsumerReg(subBuilder.buildPartial());
              break;
            }
            case 138: {
              com.dp.blackhole.protocol.control.AssignConsumerPB.AssignConsumer.Builder subBuilder = com.dp.blackhole.protocol.control.AssignConsumerPB.AssignConsumer.newBuilder();
              if (hasAssignConsumer()) {
                subBuilder.mergeFrom(getAssignConsumer());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setAssignConsumer(subBuilder.buildPartial());
              break;
            }
            case 146: {
              com.dp.blackhole.protocol.control.OffsetCommitPB.OffsetCommit.Builder subBuilder = com.dp.blackhole.protocol.control.OffsetCommitPB.OffsetCommit.newBuilder();
              if (hasOffsetCommit()) {
                subBuilder.mergeFrom(getOffsetCommit());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setOffsetCommit(subBuilder.buildPartial());
              break;
            }
            case 154: {
              com.dp.blackhole.protocol.control.TopicReportPB.TopicReport.Builder subBuilder = com.dp.blackhole.protocol.control.TopicReportPB.TopicReport.newBuilder();
              if (hasTopicReport()) {
                subBuilder.mergeFrom(getTopicReport());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTopicReport(subBuilder.buildPartial());
              break;
            }
            case 162: {
              com.dp.blackhole.protocol.control.RestartPB.Restart.Builder subBuilder = com.dp.blackhole.protocol.control.RestartPB.Restart.newBuilder();
              if (hasRestart()) {
                subBuilder.mergeFrom(getRestart());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRestart(subBuilder.buildPartial());
              break;
            }
            case 170: {
              com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit.Builder subBuilder = com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit.newBuilder();
              if (hasQuit()) {
                subBuilder.mergeFrom(getQuit());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setQuit(subBuilder.buildPartial());
              break;
            }
            case 178: {
              com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean.Builder subBuilder = com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean.newBuilder();
              if (hasClean()) {
                subBuilder.mergeFrom(getClean());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setClean(subBuilder.buildPartial());
              break;
            }
            case 186: {
              com.dp.blackhole.protocol.control.RollCleanPB.RollClean.Builder subBuilder = com.dp.blackhole.protocol.control.RollCleanPB.RollClean.newBuilder();
              if (hasRollClean()) {
                subBuilder.mergeFrom(getRollClean());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRollClean(subBuilder.buildPartial());
              break;
            }
            case 194: {
              com.dp.blackhole.protocol.control.DumpConsumerGroupPB.DumpConsumerGroup.Builder subBuilder = com.dp.blackhole.protocol.control.DumpConsumerGroupPB.DumpConsumerGroup.newBuilder();
              if (hasDumpConsumerGroup()) {
                subBuilder.mergeFrom(getDumpConsumerGroup());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setDumpConsumerGroup(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .blackhole.Message.MessageType type = 1;
      public boolean hasType() {
        return result.hasType();
      }
      public com.dp.blackhole.protocol.control.MessagePB.Message.MessageType getType() {
        return result.getType();
      }
      public Builder setType(com.dp.blackhole.protocol.control.MessagePB.Message.MessageType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = com.dp.blackhole.protocol.control.MessagePB.Message.MessageType.HEARTBEART;
        return this;
      }
      
      // optional .blackhole.AppReg appReg = 2;
      public boolean hasAppReg() {
        return result.hasAppReg();
      }
      public com.dp.blackhole.protocol.control.AppRegPB.AppReg getAppReg() {
        return result.getAppReg();
      }
      public Builder setAppReg(com.dp.blackhole.protocol.control.AppRegPB.AppReg value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasAppReg = true;
        result.appReg_ = value;
        return this;
      }
      public Builder setAppReg(com.dp.blackhole.protocol.control.AppRegPB.AppReg.Builder builderForValue) {
        result.hasAppReg = true;
        result.appReg_ = builderForValue.build();
        return this;
      }
      public Builder mergeAppReg(com.dp.blackhole.protocol.control.AppRegPB.AppReg value) {
        if (result.hasAppReg() &&
            result.appReg_ != com.dp.blackhole.protocol.control.AppRegPB.AppReg.getDefaultInstance()) {
          result.appReg_ =
            com.dp.blackhole.protocol.control.AppRegPB.AppReg.newBuilder(result.appReg_).mergeFrom(value).buildPartial();
        } else {
          result.appReg_ = value;
        }
        result.hasAppReg = true;
        return this;
      }
      public Builder clearAppReg() {
        result.hasAppReg = false;
        result.appReg_ = com.dp.blackhole.protocol.control.AppRegPB.AppReg.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.AssignBroker assignBroker = 3;
      public boolean hasAssignBroker() {
        return result.hasAssignBroker();
      }
      public com.dp.blackhole.protocol.control.AssignBrokerPB.AssignBroker getAssignBroker() {
        return result.getAssignBroker();
      }
      public Builder setAssignBroker(com.dp.blackhole.protocol.control.AssignBrokerPB.AssignBroker value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasAssignBroker = true;
        result.assignBroker_ = value;
        return this;
      }
      public Builder setAssignBroker(com.dp.blackhole.protocol.control.AssignBrokerPB.AssignBroker.Builder builderForValue) {
        result.hasAssignBroker = true;
        result.assignBroker_ = builderForValue.build();
        return this;
      }
      public Builder mergeAssignBroker(com.dp.blackhole.protocol.control.AssignBrokerPB.AssignBroker value) {
        if (result.hasAssignBroker() &&
            result.assignBroker_ != com.dp.blackhole.protocol.control.AssignBrokerPB.AssignBroker.getDefaultInstance()) {
          result.assignBroker_ =
            com.dp.blackhole.protocol.control.AssignBrokerPB.AssignBroker.newBuilder(result.assignBroker_).mergeFrom(value).buildPartial();
        } else {
          result.assignBroker_ = value;
        }
        result.hasAssignBroker = true;
        return this;
      }
      public Builder clearAssignBroker() {
        result.hasAssignBroker = false;
        result.assignBroker_ = com.dp.blackhole.protocol.control.AssignBrokerPB.AssignBroker.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.AppRoll appRoll = 4;
      public boolean hasAppRoll() {
        return result.hasAppRoll();
      }
      public com.dp.blackhole.protocol.control.AppRollPB.AppRoll getAppRoll() {
        return result.getAppRoll();
      }
      public Builder setAppRoll(com.dp.blackhole.protocol.control.AppRollPB.AppRoll value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasAppRoll = true;
        result.appRoll_ = value;
        return this;
      }
      public Builder setAppRoll(com.dp.blackhole.protocol.control.AppRollPB.AppRoll.Builder builderForValue) {
        result.hasAppRoll = true;
        result.appRoll_ = builderForValue.build();
        return this;
      }
      public Builder mergeAppRoll(com.dp.blackhole.protocol.control.AppRollPB.AppRoll value) {
        if (result.hasAppRoll() &&
            result.appRoll_ != com.dp.blackhole.protocol.control.AppRollPB.AppRoll.getDefaultInstance()) {
          result.appRoll_ =
            com.dp.blackhole.protocol.control.AppRollPB.AppRoll.newBuilder(result.appRoll_).mergeFrom(value).buildPartial();
        } else {
          result.appRoll_ = value;
        }
        result.hasAppRoll = true;
        return this;
      }
      public Builder clearAppRoll() {
        result.hasAppRoll = false;
        result.appRoll_ = com.dp.blackhole.protocol.control.AppRollPB.AppRoll.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.RecoveryRoll recoveryRoll = 5;
      public boolean hasRecoveryRoll() {
        return result.hasRecoveryRoll();
      }
      public com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll getRecoveryRoll() {
        return result.getRecoveryRoll();
      }
      public Builder setRecoveryRoll(com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRecoveryRoll = true;
        result.recoveryRoll_ = value;
        return this;
      }
      public Builder setRecoveryRoll(com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll.Builder builderForValue) {
        result.hasRecoveryRoll = true;
        result.recoveryRoll_ = builderForValue.build();
        return this;
      }
      public Builder mergeRecoveryRoll(com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll value) {
        if (result.hasRecoveryRoll() &&
            result.recoveryRoll_ != com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll.getDefaultInstance()) {
          result.recoveryRoll_ =
            com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll.newBuilder(result.recoveryRoll_).mergeFrom(value).buildPartial();
        } else {
          result.recoveryRoll_ = value;
        }
        result.hasRecoveryRoll = true;
        return this;
      }
      public Builder clearRecoveryRoll() {
        result.hasRecoveryRoll = false;
        result.recoveryRoll_ = com.dp.blackhole.protocol.control.RecoveryRollPB.RecoveryRoll.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.ReadyBroker readyBroker = 6;
      public boolean hasReadyBroker() {
        return result.hasReadyBroker();
      }
      public com.dp.blackhole.protocol.control.ReadyBrokerPB.ReadyBroker getReadyBroker() {
        return result.getReadyBroker();
      }
      public Builder setReadyBroker(com.dp.blackhole.protocol.control.ReadyBrokerPB.ReadyBroker value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasReadyBroker = true;
        result.readyBroker_ = value;
        return this;
      }
      public Builder setReadyBroker(com.dp.blackhole.protocol.control.ReadyBrokerPB.ReadyBroker.Builder builderForValue) {
        result.hasReadyBroker = true;
        result.readyBroker_ = builderForValue.build();
        return this;
      }
      public Builder mergeReadyBroker(com.dp.blackhole.protocol.control.ReadyBrokerPB.ReadyBroker value) {
        if (result.hasReadyBroker() &&
            result.readyBroker_ != com.dp.blackhole.protocol.control.ReadyBrokerPB.ReadyBroker.getDefaultInstance()) {
          result.readyBroker_ =
            com.dp.blackhole.protocol.control.ReadyBrokerPB.ReadyBroker.newBuilder(result.readyBroker_).mergeFrom(value).buildPartial();
        } else {
          result.readyBroker_ = value;
        }
        result.hasReadyBroker = true;
        return this;
      }
      public Builder clearReadyBroker() {
        result.hasReadyBroker = false;
        result.readyBroker_ = com.dp.blackhole.protocol.control.ReadyBrokerPB.ReadyBroker.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.RollID rollID = 7;
      public boolean hasRollID() {
        return result.hasRollID();
      }
      public com.dp.blackhole.protocol.control.RollIDPB.RollID getRollID() {
        return result.getRollID();
      }
      public Builder setRollID(com.dp.blackhole.protocol.control.RollIDPB.RollID value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRollID = true;
        result.rollID_ = value;
        return this;
      }
      public Builder setRollID(com.dp.blackhole.protocol.control.RollIDPB.RollID.Builder builderForValue) {
        result.hasRollID = true;
        result.rollID_ = builderForValue.build();
        return this;
      }
      public Builder mergeRollID(com.dp.blackhole.protocol.control.RollIDPB.RollID value) {
        if (result.hasRollID() &&
            result.rollID_ != com.dp.blackhole.protocol.control.RollIDPB.RollID.getDefaultInstance()) {
          result.rollID_ =
            com.dp.blackhole.protocol.control.RollIDPB.RollID.newBuilder(result.rollID_).mergeFrom(value).buildPartial();
        } else {
          result.rollID_ = value;
        }
        result.hasRollID = true;
        return this;
      }
      public Builder clearRollID() {
        result.hasRollID = false;
        result.rollID_ = com.dp.blackhole.protocol.control.RollIDPB.RollID.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.Failure failure = 8;
      public boolean hasFailure() {
        return result.hasFailure();
      }
      public com.dp.blackhole.protocol.control.FailurePB.Failure getFailure() {
        return result.getFailure();
      }
      public Builder setFailure(com.dp.blackhole.protocol.control.FailurePB.Failure value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFailure = true;
        result.failure_ = value;
        return this;
      }
      public Builder setFailure(com.dp.blackhole.protocol.control.FailurePB.Failure.Builder builderForValue) {
        result.hasFailure = true;
        result.failure_ = builderForValue.build();
        return this;
      }
      public Builder mergeFailure(com.dp.blackhole.protocol.control.FailurePB.Failure value) {
        if (result.hasFailure() &&
            result.failure_ != com.dp.blackhole.protocol.control.FailurePB.Failure.getDefaultInstance()) {
          result.failure_ =
            com.dp.blackhole.protocol.control.FailurePB.Failure.newBuilder(result.failure_).mergeFrom(value).buildPartial();
        } else {
          result.failure_ = value;
        }
        result.hasFailure = true;
        return this;
      }
      public Builder clearFailure() {
        result.hasFailure = false;
        result.failure_ = com.dp.blackhole.protocol.control.FailurePB.Failure.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.NoAvailableNode noAvailableNode = 9;
      public boolean hasNoAvailableNode() {
        return result.hasNoAvailableNode();
      }
      public com.dp.blackhole.protocol.control.NoAvailableNodePB.NoAvailableNode getNoAvailableNode() {
        return result.getNoAvailableNode();
      }
      public Builder setNoAvailableNode(com.dp.blackhole.protocol.control.NoAvailableNodePB.NoAvailableNode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasNoAvailableNode = true;
        result.noAvailableNode_ = value;
        return this;
      }
      public Builder setNoAvailableNode(com.dp.blackhole.protocol.control.NoAvailableNodePB.NoAvailableNode.Builder builderForValue) {
        result.hasNoAvailableNode = true;
        result.noAvailableNode_ = builderForValue.build();
        return this;
      }
      public Builder mergeNoAvailableNode(com.dp.blackhole.protocol.control.NoAvailableNodePB.NoAvailableNode value) {
        if (result.hasNoAvailableNode() &&
            result.noAvailableNode_ != com.dp.blackhole.protocol.control.NoAvailableNodePB.NoAvailableNode.getDefaultInstance()) {
          result.noAvailableNode_ =
            com.dp.blackhole.protocol.control.NoAvailableNodePB.NoAvailableNode.newBuilder(result.noAvailableNode_).mergeFrom(value).buildPartial();
        } else {
          result.noAvailableNode_ = value;
        }
        result.hasNoAvailableNode = true;
        return this;
      }
      public Builder clearNoAvailableNode() {
        result.hasNoAvailableNode = false;
        result.noAvailableNode_ = com.dp.blackhole.protocol.control.NoAvailableNodePB.NoAvailableNode.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.StreamID streamId = 10;
      public boolean hasStreamId() {
        return result.hasStreamId();
      }
      public com.dp.blackhole.protocol.control.StreamIDPB.StreamID getStreamId() {
        return result.getStreamId();
      }
      public Builder setStreamId(com.dp.blackhole.protocol.control.StreamIDPB.StreamID value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasStreamId = true;
        result.streamId_ = value;
        return this;
      }
      public Builder setStreamId(com.dp.blackhole.protocol.control.StreamIDPB.StreamID.Builder builderForValue) {
        result.hasStreamId = true;
        result.streamId_ = builderForValue.build();
        return this;
      }
      public Builder mergeStreamId(com.dp.blackhole.protocol.control.StreamIDPB.StreamID value) {
        if (result.hasStreamId() &&
            result.streamId_ != com.dp.blackhole.protocol.control.StreamIDPB.StreamID.getDefaultInstance()) {
          result.streamId_ =
            com.dp.blackhole.protocol.control.StreamIDPB.StreamID.newBuilder(result.streamId_).mergeFrom(value).buildPartial();
        } else {
          result.streamId_ = value;
        }
        result.hasStreamId = true;
        return this;
      }
      public Builder clearStreamId() {
        result.hasStreamId = false;
        result.streamId_ = com.dp.blackhole.protocol.control.StreamIDPB.StreamID.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.ConfRes confRes = 11;
      public boolean hasConfRes() {
        return result.hasConfRes();
      }
      public com.dp.blackhole.protocol.control.ConfResPB.ConfRes getConfRes() {
        return result.getConfRes();
      }
      public Builder setConfRes(com.dp.blackhole.protocol.control.ConfResPB.ConfRes value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasConfRes = true;
        result.confRes_ = value;
        return this;
      }
      public Builder setConfRes(com.dp.blackhole.protocol.control.ConfResPB.ConfRes.Builder builderForValue) {
        result.hasConfRes = true;
        result.confRes_ = builderForValue.build();
        return this;
      }
      public Builder mergeConfRes(com.dp.blackhole.protocol.control.ConfResPB.ConfRes value) {
        if (result.hasConfRes() &&
            result.confRes_ != com.dp.blackhole.protocol.control.ConfResPB.ConfRes.getDefaultInstance()) {
          result.confRes_ =
            com.dp.blackhole.protocol.control.ConfResPB.ConfRes.newBuilder(result.confRes_).mergeFrom(value).buildPartial();
        } else {
          result.confRes_ = value;
        }
        result.hasConfRes = true;
        return this;
      }
      public Builder clearConfRes() {
        result.hasConfRes = false;
        result.confRes_ = com.dp.blackhole.protocol.control.ConfResPB.ConfRes.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.DumpReply dumpReply = 12;
      public boolean hasDumpReply() {
        return result.hasDumpReply();
      }
      public com.dp.blackhole.protocol.control.DumpReplyPB.DumpReply getDumpReply() {
        return result.getDumpReply();
      }
      public Builder setDumpReply(com.dp.blackhole.protocol.control.DumpReplyPB.DumpReply value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasDumpReply = true;
        result.dumpReply_ = value;
        return this;
      }
      public Builder setDumpReply(com.dp.blackhole.protocol.control.DumpReplyPB.DumpReply.Builder builderForValue) {
        result.hasDumpReply = true;
        result.dumpReply_ = builderForValue.build();
        return this;
      }
      public Builder mergeDumpReply(com.dp.blackhole.protocol.control.DumpReplyPB.DumpReply value) {
        if (result.hasDumpReply() &&
            result.dumpReply_ != com.dp.blackhole.protocol.control.DumpReplyPB.DumpReply.getDefaultInstance()) {
          result.dumpReply_ =
            com.dp.blackhole.protocol.control.DumpReplyPB.DumpReply.newBuilder(result.dumpReply_).mergeFrom(value).buildPartial();
        } else {
          result.dumpReply_ = value;
        }
        result.hasDumpReply = true;
        return this;
      }
      public Builder clearDumpReply() {
        result.hasDumpReply = false;
        result.dumpReply_ = com.dp.blackhole.protocol.control.DumpReplyPB.DumpReply.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.RemoveConf removeConf = 13;
      public boolean hasRemoveConf() {
        return result.hasRemoveConf();
      }
      public com.dp.blackhole.protocol.control.RemoveConfPB.RemoveConf getRemoveConf() {
        return result.getRemoveConf();
      }
      public Builder setRemoveConf(com.dp.blackhole.protocol.control.RemoveConfPB.RemoveConf value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRemoveConf = true;
        result.removeConf_ = value;
        return this;
      }
      public Builder setRemoveConf(com.dp.blackhole.protocol.control.RemoveConfPB.RemoveConf.Builder builderForValue) {
        result.hasRemoveConf = true;
        result.removeConf_ = builderForValue.build();
        return this;
      }
      public Builder mergeRemoveConf(com.dp.blackhole.protocol.control.RemoveConfPB.RemoveConf value) {
        if (result.hasRemoveConf() &&
            result.removeConf_ != com.dp.blackhole.protocol.control.RemoveConfPB.RemoveConf.getDefaultInstance()) {
          result.removeConf_ =
            com.dp.blackhole.protocol.control.RemoveConfPB.RemoveConf.newBuilder(result.removeConf_).mergeFrom(value).buildPartial();
        } else {
          result.removeConf_ = value;
        }
        result.hasRemoveConf = true;
        return this;
      }
      public Builder clearRemoveConf() {
        result.hasRemoveConf = false;
        result.removeConf_ = com.dp.blackhole.protocol.control.RemoveConfPB.RemoveConf.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.BrokerReg brokerReg = 14;
      public boolean hasBrokerReg() {
        return result.hasBrokerReg();
      }
      public com.dp.blackhole.protocol.control.BrokerRegPB.BrokerReg getBrokerReg() {
        return result.getBrokerReg();
      }
      public Builder setBrokerReg(com.dp.blackhole.protocol.control.BrokerRegPB.BrokerReg value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasBrokerReg = true;
        result.brokerReg_ = value;
        return this;
      }
      public Builder setBrokerReg(com.dp.blackhole.protocol.control.BrokerRegPB.BrokerReg.Builder builderForValue) {
        result.hasBrokerReg = true;
        result.brokerReg_ = builderForValue.build();
        return this;
      }
      public Builder mergeBrokerReg(com.dp.blackhole.protocol.control.BrokerRegPB.BrokerReg value) {
        if (result.hasBrokerReg() &&
            result.brokerReg_ != com.dp.blackhole.protocol.control.BrokerRegPB.BrokerReg.getDefaultInstance()) {
          result.brokerReg_ =
            com.dp.blackhole.protocol.control.BrokerRegPB.BrokerReg.newBuilder(result.brokerReg_).mergeFrom(value).buildPartial();
        } else {
          result.brokerReg_ = value;
        }
        result.hasBrokerReg = true;
        return this;
      }
      public Builder clearBrokerReg() {
        result.hasBrokerReg = false;
        result.brokerReg_ = com.dp.blackhole.protocol.control.BrokerRegPB.BrokerReg.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.DumpApp dumpApp = 15;
      public boolean hasDumpApp() {
        return result.hasDumpApp();
      }
      public com.dp.blackhole.protocol.control.DumpAppPB.DumpApp getDumpApp() {
        return result.getDumpApp();
      }
      public Builder setDumpApp(com.dp.blackhole.protocol.control.DumpAppPB.DumpApp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasDumpApp = true;
        result.dumpApp_ = value;
        return this;
      }
      public Builder setDumpApp(com.dp.blackhole.protocol.control.DumpAppPB.DumpApp.Builder builderForValue) {
        result.hasDumpApp = true;
        result.dumpApp_ = builderForValue.build();
        return this;
      }
      public Builder mergeDumpApp(com.dp.blackhole.protocol.control.DumpAppPB.DumpApp value) {
        if (result.hasDumpApp() &&
            result.dumpApp_ != com.dp.blackhole.protocol.control.DumpAppPB.DumpApp.getDefaultInstance()) {
          result.dumpApp_ =
            com.dp.blackhole.protocol.control.DumpAppPB.DumpApp.newBuilder(result.dumpApp_).mergeFrom(value).buildPartial();
        } else {
          result.dumpApp_ = value;
        }
        result.hasDumpApp = true;
        return this;
      }
      public Builder clearDumpApp() {
        result.hasDumpApp = false;
        result.dumpApp_ = com.dp.blackhole.protocol.control.DumpAppPB.DumpApp.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.ConsumerReg consumerReg = 16;
      public boolean hasConsumerReg() {
        return result.hasConsumerReg();
      }
      public com.dp.blackhole.protocol.control.ConsumerRegPB.ConsumerReg getConsumerReg() {
        return result.getConsumerReg();
      }
      public Builder setConsumerReg(com.dp.blackhole.protocol.control.ConsumerRegPB.ConsumerReg value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasConsumerReg = true;
        result.consumerReg_ = value;
        return this;
      }
      public Builder setConsumerReg(com.dp.blackhole.protocol.control.ConsumerRegPB.ConsumerReg.Builder builderForValue) {
        result.hasConsumerReg = true;
        result.consumerReg_ = builderForValue.build();
        return this;
      }
      public Builder mergeConsumerReg(com.dp.blackhole.protocol.control.ConsumerRegPB.ConsumerReg value) {
        if (result.hasConsumerReg() &&
            result.consumerReg_ != com.dp.blackhole.protocol.control.ConsumerRegPB.ConsumerReg.getDefaultInstance()) {
          result.consumerReg_ =
            com.dp.blackhole.protocol.control.ConsumerRegPB.ConsumerReg.newBuilder(result.consumerReg_).mergeFrom(value).buildPartial();
        } else {
          result.consumerReg_ = value;
        }
        result.hasConsumerReg = true;
        return this;
      }
      public Builder clearConsumerReg() {
        result.hasConsumerReg = false;
        result.consumerReg_ = com.dp.blackhole.protocol.control.ConsumerRegPB.ConsumerReg.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.AssignConsumer assignConsumer = 17;
      public boolean hasAssignConsumer() {
        return result.hasAssignConsumer();
      }
      public com.dp.blackhole.protocol.control.AssignConsumerPB.AssignConsumer getAssignConsumer() {
        return result.getAssignConsumer();
      }
      public Builder setAssignConsumer(com.dp.blackhole.protocol.control.AssignConsumerPB.AssignConsumer value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasAssignConsumer = true;
        result.assignConsumer_ = value;
        return this;
      }
      public Builder setAssignConsumer(com.dp.blackhole.protocol.control.AssignConsumerPB.AssignConsumer.Builder builderForValue) {
        result.hasAssignConsumer = true;
        result.assignConsumer_ = builderForValue.build();
        return this;
      }
      public Builder mergeAssignConsumer(com.dp.blackhole.protocol.control.AssignConsumerPB.AssignConsumer value) {
        if (result.hasAssignConsumer() &&
            result.assignConsumer_ != com.dp.blackhole.protocol.control.AssignConsumerPB.AssignConsumer.getDefaultInstance()) {
          result.assignConsumer_ =
            com.dp.blackhole.protocol.control.AssignConsumerPB.AssignConsumer.newBuilder(result.assignConsumer_).mergeFrom(value).buildPartial();
        } else {
          result.assignConsumer_ = value;
        }
        result.hasAssignConsumer = true;
        return this;
      }
      public Builder clearAssignConsumer() {
        result.hasAssignConsumer = false;
        result.assignConsumer_ = com.dp.blackhole.protocol.control.AssignConsumerPB.AssignConsumer.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.OffsetCommit offsetCommit = 18;
      public boolean hasOffsetCommit() {
        return result.hasOffsetCommit();
      }
      public com.dp.blackhole.protocol.control.OffsetCommitPB.OffsetCommit getOffsetCommit() {
        return result.getOffsetCommit();
      }
      public Builder setOffsetCommit(com.dp.blackhole.protocol.control.OffsetCommitPB.OffsetCommit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasOffsetCommit = true;
        result.offsetCommit_ = value;
        return this;
      }
      public Builder setOffsetCommit(com.dp.blackhole.protocol.control.OffsetCommitPB.OffsetCommit.Builder builderForValue) {
        result.hasOffsetCommit = true;
        result.offsetCommit_ = builderForValue.build();
        return this;
      }
      public Builder mergeOffsetCommit(com.dp.blackhole.protocol.control.OffsetCommitPB.OffsetCommit value) {
        if (result.hasOffsetCommit() &&
            result.offsetCommit_ != com.dp.blackhole.protocol.control.OffsetCommitPB.OffsetCommit.getDefaultInstance()) {
          result.offsetCommit_ =
            com.dp.blackhole.protocol.control.OffsetCommitPB.OffsetCommit.newBuilder(result.offsetCommit_).mergeFrom(value).buildPartial();
        } else {
          result.offsetCommit_ = value;
        }
        result.hasOffsetCommit = true;
        return this;
      }
      public Builder clearOffsetCommit() {
        result.hasOffsetCommit = false;
        result.offsetCommit_ = com.dp.blackhole.protocol.control.OffsetCommitPB.OffsetCommit.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.TopicReport topicReport = 19;
      public boolean hasTopicReport() {
        return result.hasTopicReport();
      }
      public com.dp.blackhole.protocol.control.TopicReportPB.TopicReport getTopicReport() {
        return result.getTopicReport();
      }
      public Builder setTopicReport(com.dp.blackhole.protocol.control.TopicReportPB.TopicReport value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasTopicReport = true;
        result.topicReport_ = value;
        return this;
      }
      public Builder setTopicReport(com.dp.blackhole.protocol.control.TopicReportPB.TopicReport.Builder builderForValue) {
        result.hasTopicReport = true;
        result.topicReport_ = builderForValue.build();
        return this;
      }
      public Builder mergeTopicReport(com.dp.blackhole.protocol.control.TopicReportPB.TopicReport value) {
        if (result.hasTopicReport() &&
            result.topicReport_ != com.dp.blackhole.protocol.control.TopicReportPB.TopicReport.getDefaultInstance()) {
          result.topicReport_ =
            com.dp.blackhole.protocol.control.TopicReportPB.TopicReport.newBuilder(result.topicReport_).mergeFrom(value).buildPartial();
        } else {
          result.topicReport_ = value;
        }
        result.hasTopicReport = true;
        return this;
      }
      public Builder clearTopicReport() {
        result.hasTopicReport = false;
        result.topicReport_ = com.dp.blackhole.protocol.control.TopicReportPB.TopicReport.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.Restart restart = 20;
      public boolean hasRestart() {
        return result.hasRestart();
      }
      public com.dp.blackhole.protocol.control.RestartPB.Restart getRestart() {
        return result.getRestart();
      }
      public Builder setRestart(com.dp.blackhole.protocol.control.RestartPB.Restart value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRestart = true;
        result.restart_ = value;
        return this;
      }
      public Builder setRestart(com.dp.blackhole.protocol.control.RestartPB.Restart.Builder builderForValue) {
        result.hasRestart = true;
        result.restart_ = builderForValue.build();
        return this;
      }
      public Builder mergeRestart(com.dp.blackhole.protocol.control.RestartPB.Restart value) {
        if (result.hasRestart() &&
            result.restart_ != com.dp.blackhole.protocol.control.RestartPB.Restart.getDefaultInstance()) {
          result.restart_ =
            com.dp.blackhole.protocol.control.RestartPB.Restart.newBuilder(result.restart_).mergeFrom(value).buildPartial();
        } else {
          result.restart_ = value;
        }
        result.hasRestart = true;
        return this;
      }
      public Builder clearRestart() {
        result.hasRestart = false;
        result.restart_ = com.dp.blackhole.protocol.control.RestartPB.Restart.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.Quit quit = 21;
      public boolean hasQuit() {
        return result.hasQuit();
      }
      public com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit getQuit() {
        return result.getQuit();
      }
      public Builder setQuit(com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasQuit = true;
        result.quit_ = value;
        return this;
      }
      public Builder setQuit(com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit.Builder builderForValue) {
        result.hasQuit = true;
        result.quit_ = builderForValue.build();
        return this;
      }
      public Builder mergeQuit(com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit value) {
        if (result.hasQuit() &&
            result.quit_ != com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit.getDefaultInstance()) {
          result.quit_ =
            com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit.newBuilder(result.quit_).mergeFrom(value).buildPartial();
        } else {
          result.quit_ = value;
        }
        result.hasQuit = true;
        return this;
      }
      public Builder clearQuit() {
        result.hasQuit = false;
        result.quit_ = com.dp.blackhole.protocol.control.QuitAndCleanPB.Quit.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.Clean clean = 22;
      public boolean hasClean() {
        return result.hasClean();
      }
      public com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean getClean() {
        return result.getClean();
      }
      public Builder setClean(com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasClean = true;
        result.clean_ = value;
        return this;
      }
      public Builder setClean(com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean.Builder builderForValue) {
        result.hasClean = true;
        result.clean_ = builderForValue.build();
        return this;
      }
      public Builder mergeClean(com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean value) {
        if (result.hasClean() &&
            result.clean_ != com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean.getDefaultInstance()) {
          result.clean_ =
            com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean.newBuilder(result.clean_).mergeFrom(value).buildPartial();
        } else {
          result.clean_ = value;
        }
        result.hasClean = true;
        return this;
      }
      public Builder clearClean() {
        result.hasClean = false;
        result.clean_ = com.dp.blackhole.protocol.control.QuitAndCleanPB.Clean.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.RollClean rollClean = 23;
      public boolean hasRollClean() {
        return result.hasRollClean();
      }
      public com.dp.blackhole.protocol.control.RollCleanPB.RollClean getRollClean() {
        return result.getRollClean();
      }
      public Builder setRollClean(com.dp.blackhole.protocol.control.RollCleanPB.RollClean value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRollClean = true;
        result.rollClean_ = value;
        return this;
      }
      public Builder setRollClean(com.dp.blackhole.protocol.control.RollCleanPB.RollClean.Builder builderForValue) {
        result.hasRollClean = true;
        result.rollClean_ = builderForValue.build();
        return this;
      }
      public Builder mergeRollClean(com.dp.blackhole.protocol.control.RollCleanPB.RollClean value) {
        if (result.hasRollClean() &&
            result.rollClean_ != com.dp.blackhole.protocol.control.RollCleanPB.RollClean.getDefaultInstance()) {
          result.rollClean_ =
            com.dp.blackhole.protocol.control.RollCleanPB.RollClean.newBuilder(result.rollClean_).mergeFrom(value).buildPartial();
        } else {
          result.rollClean_ = value;
        }
        result.hasRollClean = true;
        return this;
      }
      public Builder clearRollClean() {
        result.hasRollClean = false;
        result.rollClean_ = com.dp.blackhole.protocol.control.RollCleanPB.RollClean.getDefaultInstance();
        return this;
      }
      
      // optional .blackhole.DumpConsumerGroup dumpConsumerGroup = 24;
      public boolean hasDumpConsumerGroup() {
        return result.hasDumpConsumerGroup();
      }
      public com.dp.blackhole.protocol.control.DumpConsumerGroupPB.DumpConsumerGroup getDumpConsumerGroup() {
        return result.getDumpConsumerGroup();
      }
      public Builder setDumpConsumerGroup(com.dp.blackhole.protocol.control.DumpConsumerGroupPB.DumpConsumerGroup value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasDumpConsumerGroup = true;
        result.dumpConsumerGroup_ = value;
        return this;
      }
      public Builder setDumpConsumerGroup(com.dp.blackhole.protocol.control.DumpConsumerGroupPB.DumpConsumerGroup.Builder builderForValue) {
        result.hasDumpConsumerGroup = true;
        result.dumpConsumerGroup_ = builderForValue.build();
        return this;
      }
      public Builder mergeDumpConsumerGroup(com.dp.blackhole.protocol.control.DumpConsumerGroupPB.DumpConsumerGroup value) {
        if (result.hasDumpConsumerGroup() &&
            result.dumpConsumerGroup_ != com.dp.blackhole.protocol.control.DumpConsumerGroupPB.DumpConsumerGroup.getDefaultInstance()) {
          result.dumpConsumerGroup_ =
            com.dp.blackhole.protocol.control.DumpConsumerGroupPB.DumpConsumerGroup.newBuilder(result.dumpConsumerGroup_).mergeFrom(value).buildPartial();
        } else {
          result.dumpConsumerGroup_ = value;
        }
        result.hasDumpConsumerGroup = true;
        return this;
      }
      public Builder clearDumpConsumerGroup() {
        result.hasDumpConsumerGroup = false;
        result.dumpConsumerGroup_ = com.dp.blackhole.protocol.control.DumpConsumerGroupPB.DumpConsumerGroup.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:blackhole.Message)
    }
    
    static {
      defaultInstance = new Message(true);
      com.dp.blackhole.protocol.control.MessagePB.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:blackhole.Message)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_blackhole_Message_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_blackhole_Message_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rMessage.proto\022\tblackhole\032\014AppReg.proto" +
      "\032\022AssignBroker.proto\032\rAppRoll.proto\032\022Rec" +
      "overyRoll.proto\032\021ReadyBroker.proto\032\014Roll" +
      "ID.proto\032\rFailure.proto\032\025NoAvailableNode" +
      ".proto\032\016StreamID.proto\032\rConfRes.proto\032\017D" +
      "umpReply.proto\032\020RemoveConf.proto\032\017Broker" +
      "Reg.proto\032\rDumpApp.proto\032\021ConsumerReg.pr" +
      "oto\032\024AssignConsumer.proto\032\022OffsetCommit." +
      "proto\032\021TopicReport.proto\032\rRestart.proto\032" +
      "\022QuitAndClean.proto\032\017RollClean.proto\032\027Du",
      "mpConsumerGroup.proto\"\256\r\n\007Message\022,\n\004typ" +
      "e\030\001 \002(\0162\036.blackhole.Message.MessageType\022" +
      "!\n\006appReg\030\002 \001(\0132\021.blackhole.AppReg\022-\n\014as" +
      "signBroker\030\003 \001(\0132\027.blackhole.AssignBroke" +
      "r\022#\n\007appRoll\030\004 \001(\0132\022.blackhole.AppRoll\022-" +
      "\n\014recoveryRoll\030\005 \001(\0132\027.blackhole.Recover" +
      "yRoll\022+\n\013readyBroker\030\006 \001(\0132\026.blackhole.R" +
      "eadyBroker\022!\n\006rollID\030\007 \001(\0132\021.blackhole.R" +
      "ollID\022#\n\007failure\030\010 \001(\0132\022.blackhole.Failu" +
      "re\0223\n\017noAvailableNode\030\t \001(\0132\032.blackhole.",
      "NoAvailableNode\022%\n\010streamId\030\n \001(\0132\023.blac" +
      "khole.StreamID\022#\n\007confRes\030\013 \001(\0132\022.blackh" +
      "ole.ConfRes\022\'\n\tdumpReply\030\014 \001(\0132\024.blackho" +
      "le.DumpReply\022)\n\nremoveConf\030\r \001(\0132\025.black" +
      "hole.RemoveConf\022\'\n\tbrokerReg\030\016 \001(\0132\024.bla" +
      "ckhole.BrokerReg\022#\n\007dumpApp\030\017 \001(\0132\022.blac" +
      "khole.DumpApp\022+\n\013consumerReg\030\020 \001(\0132\026.bla" +
      "ckhole.ConsumerReg\0221\n\016assignConsumer\030\021 \001" +
      "(\0132\031.blackhole.AssignConsumer\022-\n\014offsetC" +
      "ommit\030\022 \001(\0132\027.blackhole.OffsetCommit\022+\n\013",
      "topicReport\030\023 \001(\0132\026.blackhole.TopicRepor" +
      "t\022#\n\007restart\030\024 \001(\0132\022.blackhole.Restart\022\035" +
      "\n\004quit\030\025 \001(\0132\017.blackhole.Quit\022\037\n\005clean\030\026" +
      " \001(\0132\020.blackhole.Clean\022\'\n\trollClean\030\027 \001(" +
      "\0132\024.blackhole.RollClean\0227\n\021dumpConsumerG" +
      "roup\030\030 \001(\0132\034.blackhole.DumpConsumerGroup" +
      "\"\263\005\n\013MessageType\022\016\n\nHEARTBEART\020\001\022\013\n\007APP_" +
      "REG\020\002\022\016\n\nBROKER_REG\020\003\022\021\n\rASSIGN_BROKER\020\004" +
      "\022\020\n\014READY_BROKER\020\005\022\014\n\010APP_ROLL\020\006\022\017\n\013UPLO" +
      "AD_ROLL\020\007\022\022\n\016UPLOAD_SUCCESS\020\010\022\017\n\013UPLOAD_",
      "FAIL\020\t\022\021\n\rRECOVERY_ROLL\020\n\022\024\n\020RECOVERY_SU" +
      "CCESS\020\013\022\021\n\rRECOVERY_FAIL\020\014\022\013\n\007FAILURE\020\r\022" +
      "\023\n\017NOAVAILABLENODE\020\016\022\021\n\rUNRECOVERABLE\020\017\022" +
      "\030\n\024MANUAL_RECOVERY_ROLL\020\020\022\014\n\010DUMPSTAT\020\021\022" +
      "\020\n\014RETIRESTREAM\020\022\022\014\n\010CONF_REQ\020\023\022\014\n\010CONF_" +
      "RES\020\024\022\023\n\017NOAVAILABLECONF\020\025\022\014\n\010DUMPCONF\020\026" +
      "\022\r\n\tDUMPREPLY\020\027\022\014\n\010LISTAPPS\020\030\022\017\n\013REMOVE_" +
      "CONF\020\031\022\014\n\010DUMP_APP\020\032\022\020\n\014CONSUMER_REG\020\033\022\023" +
      "\n\017ASSIGN_CONSUMER\020\034\022\021\n\rOFFSET_COMMIT\020\035\022\017" +
      "\n\013TOPICREPORT\020\036\022\023\n\017CONSUMERREGFAIL\020\037\022\026\n\022",
      "MAKR_UNRECOVERABLE\020 \022\014\n\010LISTIDLE\020!\022\013\n\007RE" +
      "START\020\"\022\010\n\004QUIT\020#\022\t\n\005CLEAN\020$\022\016\n\nROLL_CLE" +
      "AN\020%\022\027\n\023DUMP_CONSUMER_GROUP\020&\022\027\n\023LIST_CO" +
      "NSUMER_GROUP\020\'B.\n!com.dp.blackhole.proto" +
      "col.controlB\tMessagePB"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_blackhole_Message_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_blackhole_Message_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_blackhole_Message_descriptor,
              new java.lang.String[] { "Type", "AppReg", "AssignBroker", "AppRoll", "RecoveryRoll", "ReadyBroker", "RollID", "Failure", "NoAvailableNode", "StreamId", "ConfRes", "DumpReply", "RemoveConf", "BrokerReg", "DumpApp", "ConsumerReg", "AssignConsumer", "OffsetCommit", "TopicReport", "Restart", "Quit", "Clean", "RollClean", "DumpConsumerGroup", },
              com.dp.blackhole.protocol.control.MessagePB.Message.class,
              com.dp.blackhole.protocol.control.MessagePB.Message.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.dp.blackhole.protocol.control.AppRegPB.getDescriptor(),
          com.dp.blackhole.protocol.control.AssignBrokerPB.getDescriptor(),
          com.dp.blackhole.protocol.control.AppRollPB.getDescriptor(),
          com.dp.blackhole.protocol.control.RecoveryRollPB.getDescriptor(),
          com.dp.blackhole.protocol.control.ReadyBrokerPB.getDescriptor(),
          com.dp.blackhole.protocol.control.RollIDPB.getDescriptor(),
          com.dp.blackhole.protocol.control.FailurePB.getDescriptor(),
          com.dp.blackhole.protocol.control.NoAvailableNodePB.getDescriptor(),
          com.dp.blackhole.protocol.control.StreamIDPB.getDescriptor(),
          com.dp.blackhole.protocol.control.ConfResPB.getDescriptor(),
          com.dp.blackhole.protocol.control.DumpReplyPB.getDescriptor(),
          com.dp.blackhole.protocol.control.RemoveConfPB.getDescriptor(),
          com.dp.blackhole.protocol.control.BrokerRegPB.getDescriptor(),
          com.dp.blackhole.protocol.control.DumpAppPB.getDescriptor(),
          com.dp.blackhole.protocol.control.ConsumerRegPB.getDescriptor(),
          com.dp.blackhole.protocol.control.AssignConsumerPB.getDescriptor(),
          com.dp.blackhole.protocol.control.OffsetCommitPB.getDescriptor(),
          com.dp.blackhole.protocol.control.TopicReportPB.getDescriptor(),
          com.dp.blackhole.protocol.control.RestartPB.getDescriptor(),
          com.dp.blackhole.protocol.control.QuitAndCleanPB.getDescriptor(),
          com.dp.blackhole.protocol.control.RollCleanPB.getDescriptor(),
          com.dp.blackhole.protocol.control.DumpConsumerGroupPB.getDescriptor(),
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
