// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Failure.proto

package com.dp.blackhole.protocol.control;

public final class FailurePB {
  private FailurePB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class Failure extends
      com.google.protobuf.GeneratedMessage {
    // Use Failure.newBuilder() to construct.
    private Failure() {
      initFields();
    }
    private Failure(boolean noInit) {}
    
    private static final Failure defaultInstance;
    public static Failure getDefaultInstance() {
      return defaultInstance;
    }
    
    public Failure getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dp.blackhole.protocol.control.FailurePB.internal_static_blackhole_Failure_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dp.blackhole.protocol.control.FailurePB.internal_static_blackhole_Failure_fieldAccessorTable;
    }
    
    public enum NodeType
        implements com.google.protobuf.ProtocolMessageEnum {
      APP_NODE(0, 1),
      BROKER_NODE(1, 2),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static NodeType valueOf(int value) {
        switch (value) {
          case 1: return APP_NODE;
          case 2: return BROKER_NODE;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<NodeType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<NodeType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<NodeType>() {
              public NodeType findValueByNumber(int number) {
                return NodeType.valueOf(number)
      ;        }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.dp.blackhole.protocol.control.FailurePB.Failure.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final NodeType[] VALUES = {
        APP_NODE, BROKER_NODE, 
      };
      public static NodeType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private NodeType(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        com.dp.blackhole.protocol.control.FailurePB.getDescriptor();
      }
      
      // @@protoc_insertion_point(enum_scope:blackhole.Failure.NodeType)
    }
    
    // required string topic = 1;
    public static final int TOPIC_FIELD_NUMBER = 1;
    private boolean hasTopic;
    private java.lang.String topic_ = "";
    public boolean hasTopic() { return hasTopic; }
    public java.lang.String getTopic() { return topic_; }
    
    // required .blackhole.Failure.NodeType type = 2;
    public static final int TYPE_FIELD_NUMBER = 2;
    private boolean hasType;
    private com.dp.blackhole.protocol.control.FailurePB.Failure.NodeType type_;
    public boolean hasType() { return hasType; }
    public com.dp.blackhole.protocol.control.FailurePB.Failure.NodeType getType() { return type_; }
    
    // required string source_identify = 3;
    public static final int SOURCE_IDENTIFY_FIELD_NUMBER = 3;
    private boolean hasSourceIdentify;
    private java.lang.String sourceIdentify_ = "";
    public boolean hasSourceIdentify() { return hasSourceIdentify; }
    public java.lang.String getSourceIdentify() { return sourceIdentify_; }
    
    // required int64 failTs = 4;
    public static final int FAILTS_FIELD_NUMBER = 4;
    private boolean hasFailTs;
    private long failTs_ = 0L;
    public boolean hasFailTs() { return hasFailTs; }
    public long getFailTs() { return failTs_; }
    
    private void initFields() {
      type_ = com.dp.blackhole.protocol.control.FailurePB.Failure.NodeType.APP_NODE;
    }
    public final boolean isInitialized() {
      if (!hasTopic) return false;
      if (!hasType) return false;
      if (!hasSourceIdentify) return false;
      if (!hasFailTs) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTopic()) {
        output.writeString(1, getTopic());
      }
      if (hasType()) {
        output.writeEnum(2, getType().getNumber());
      }
      if (hasSourceIdentify()) {
        output.writeString(3, getSourceIdentify());
      }
      if (hasFailTs()) {
        output.writeInt64(4, getFailTs());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTopic()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getTopic());
      }
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, getType().getNumber());
      }
      if (hasSourceIdentify()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getSourceIdentify());
      }
      if (hasFailTs()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, getFailTs());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.dp.blackhole.protocol.control.FailurePB.Failure parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.FailurePB.Failure parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.FailurePB.Failure parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.FailurePB.Failure parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.FailurePB.Failure parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.FailurePB.Failure parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.FailurePB.Failure parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.dp.blackhole.protocol.control.FailurePB.Failure parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.dp.blackhole.protocol.control.FailurePB.Failure parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.FailurePB.Failure parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dp.blackhole.protocol.control.FailurePB.Failure prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.dp.blackhole.protocol.control.FailurePB.Failure result;
      
      // Construct using com.dp.blackhole.protocol.control.FailurePB.Failure.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.dp.blackhole.protocol.control.FailurePB.Failure();
        return builder;
      }
      
      protected com.dp.blackhole.protocol.control.FailurePB.Failure internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.dp.blackhole.protocol.control.FailurePB.Failure();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dp.blackhole.protocol.control.FailurePB.Failure.getDescriptor();
      }
      
      public com.dp.blackhole.protocol.control.FailurePB.Failure getDefaultInstanceForType() {
        return com.dp.blackhole.protocol.control.FailurePB.Failure.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.dp.blackhole.protocol.control.FailurePB.Failure build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.dp.blackhole.protocol.control.FailurePB.Failure buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.dp.blackhole.protocol.control.FailurePB.Failure buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.dp.blackhole.protocol.control.FailurePB.Failure returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dp.blackhole.protocol.control.FailurePB.Failure) {
          return mergeFrom((com.dp.blackhole.protocol.control.FailurePB.Failure)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.dp.blackhole.protocol.control.FailurePB.Failure other) {
        if (other == com.dp.blackhole.protocol.control.FailurePB.Failure.getDefaultInstance()) return this;
        if (other.hasTopic()) {
          setTopic(other.getTopic());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasSourceIdentify()) {
          setSourceIdentify(other.getSourceIdentify());
        }
        if (other.hasFailTs()) {
          setFailTs(other.getFailTs());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setTopic(input.readString());
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.dp.blackhole.protocol.control.FailurePB.Failure.NodeType value = com.dp.blackhole.protocol.control.FailurePB.Failure.NodeType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                setType(value);
              }
              break;
            }
            case 26: {
              setSourceIdentify(input.readString());
              break;
            }
            case 32: {
              setFailTs(input.readInt64());
              break;
            }
          }
        }
      }
      
      
      // required string topic = 1;
      public boolean hasTopic() {
        return result.hasTopic();
      }
      public java.lang.String getTopic() {
        return result.getTopic();
      }
      public Builder setTopic(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasTopic = true;
        result.topic_ = value;
        return this;
      }
      public Builder clearTopic() {
        result.hasTopic = false;
        result.topic_ = getDefaultInstance().getTopic();
        return this;
      }
      
      // required .blackhole.Failure.NodeType type = 2;
      public boolean hasType() {
        return result.hasType();
      }
      public com.dp.blackhole.protocol.control.FailurePB.Failure.NodeType getType() {
        return result.getType();
      }
      public Builder setType(com.dp.blackhole.protocol.control.FailurePB.Failure.NodeType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = com.dp.blackhole.protocol.control.FailurePB.Failure.NodeType.APP_NODE;
        return this;
      }
      
      // required string source_identify = 3;
      public boolean hasSourceIdentify() {
        return result.hasSourceIdentify();
      }
      public java.lang.String getSourceIdentify() {
        return result.getSourceIdentify();
      }
      public Builder setSourceIdentify(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSourceIdentify = true;
        result.sourceIdentify_ = value;
        return this;
      }
      public Builder clearSourceIdentify() {
        result.hasSourceIdentify = false;
        result.sourceIdentify_ = getDefaultInstance().getSourceIdentify();
        return this;
      }
      
      // required int64 failTs = 4;
      public boolean hasFailTs() {
        return result.hasFailTs();
      }
      public long getFailTs() {
        return result.getFailTs();
      }
      public Builder setFailTs(long value) {
        result.hasFailTs = true;
        result.failTs_ = value;
        return this;
      }
      public Builder clearFailTs() {
        result.hasFailTs = false;
        result.failTs_ = 0L;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:blackhole.Failure)
    }
    
    static {
      defaultInstance = new Failure(true);
      com.dp.blackhole.protocol.control.FailurePB.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:blackhole.Failure)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_blackhole_Failure_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_blackhole_Failure_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rFailure.proto\022\tblackhole\"\227\001\n\007Failure\022\r" +
      "\n\005topic\030\001 \002(\t\022)\n\004type\030\002 \002(\0162\033.blackhole." +
      "Failure.NodeType\022\027\n\017source_identify\030\003 \002(" +
      "\t\022\016\n\006failTs\030\004 \002(\003\")\n\010NodeType\022\014\n\010APP_NOD" +
      "E\020\001\022\017\n\013BROKER_NODE\020\002B.\n!com.dp.blackhole" +
      ".protocol.controlB\tFailurePB"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_blackhole_Failure_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_blackhole_Failure_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_blackhole_Failure_descriptor,
              new java.lang.String[] { "Topic", "Type", "SourceIdentify", "FailTs", },
              com.dp.blackhole.protocol.control.FailurePB.Failure.class,
              com.dp.blackhole.protocol.control.FailurePB.Failure.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
