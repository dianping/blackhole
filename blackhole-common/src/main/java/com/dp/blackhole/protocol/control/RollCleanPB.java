// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RollClean.proto

package com.dp.blackhole.protocol.control;

public final class RollCleanPB {
  private RollCleanPB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class RollClean extends
      com.google.protobuf.GeneratedMessage {
    // Use RollClean.newBuilder() to construct.
    private RollClean() {
      initFields();
    }
    private RollClean(boolean noInit) {}
    
    private static final RollClean defaultInstance;
    public static RollClean getDefaultInstance() {
      return defaultInstance;
    }
    
    public RollClean getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dp.blackhole.protocol.control.RollCleanPB.internal_static_blackhole_RollClean_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dp.blackhole.protocol.control.RollCleanPB.internal_static_blackhole_RollClean_fieldAccessorTable;
    }
    
    // required string topic = 1;
    public static final int TOPIC_FIELD_NUMBER = 1;
    private boolean hasTopic;
    private java.lang.String topic_ = "";
    public boolean hasTopic() { return hasTopic; }
    public java.lang.String getTopic() { return topic_; }
    
    // required string source_identify = 2;
    public static final int SOURCE_IDENTIFY_FIELD_NUMBER = 2;
    private boolean hasSourceIdentify;
    private java.lang.String sourceIdentify_ = "";
    public boolean hasSourceIdentify() { return hasSourceIdentify; }
    public java.lang.String getSourceIdentify() { return sourceIdentify_; }
    
    // required int64 period = 3;
    public static final int PERIOD_FIELD_NUMBER = 3;
    private boolean hasPeriod;
    private long period_ = 0L;
    public boolean hasPeriod() { return hasPeriod; }
    public long getPeriod() { return period_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasTopic) return false;
      if (!hasSourceIdentify) return false;
      if (!hasPeriod) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTopic()) {
        output.writeString(1, getTopic());
      }
      if (hasSourceIdentify()) {
        output.writeString(2, getSourceIdentify());
      }
      if (hasPeriod()) {
        output.writeInt64(3, getPeriod());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTopic()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getTopic());
      }
      if (hasSourceIdentify()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getSourceIdentify());
      }
      if (hasPeriod()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, getPeriod());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.dp.blackhole.protocol.control.RollCleanPB.RollClean parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RollCleanPB.RollClean parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RollCleanPB.RollClean parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RollCleanPB.RollClean parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RollCleanPB.RollClean parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RollCleanPB.RollClean parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RollCleanPB.RollClean parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.dp.blackhole.protocol.control.RollCleanPB.RollClean parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.dp.blackhole.protocol.control.RollCleanPB.RollClean parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RollCleanPB.RollClean parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dp.blackhole.protocol.control.RollCleanPB.RollClean prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.dp.blackhole.protocol.control.RollCleanPB.RollClean result;
      
      // Construct using com.dp.blackhole.protocol.control.RollCleanPB.RollClean.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.dp.blackhole.protocol.control.RollCleanPB.RollClean();
        return builder;
      }
      
      protected com.dp.blackhole.protocol.control.RollCleanPB.RollClean internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.dp.blackhole.protocol.control.RollCleanPB.RollClean();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dp.blackhole.protocol.control.RollCleanPB.RollClean.getDescriptor();
      }
      
      public com.dp.blackhole.protocol.control.RollCleanPB.RollClean getDefaultInstanceForType() {
        return com.dp.blackhole.protocol.control.RollCleanPB.RollClean.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.dp.blackhole.protocol.control.RollCleanPB.RollClean build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.dp.blackhole.protocol.control.RollCleanPB.RollClean buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.dp.blackhole.protocol.control.RollCleanPB.RollClean buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.dp.blackhole.protocol.control.RollCleanPB.RollClean returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dp.blackhole.protocol.control.RollCleanPB.RollClean) {
          return mergeFrom((com.dp.blackhole.protocol.control.RollCleanPB.RollClean)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.dp.blackhole.protocol.control.RollCleanPB.RollClean other) {
        if (other == com.dp.blackhole.protocol.control.RollCleanPB.RollClean.getDefaultInstance()) return this;
        if (other.hasTopic()) {
          setTopic(other.getTopic());
        }
        if (other.hasSourceIdentify()) {
          setSourceIdentify(other.getSourceIdentify());
        }
        if (other.hasPeriod()) {
          setPeriod(other.getPeriod());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setTopic(input.readString());
              break;
            }
            case 18: {
              setSourceIdentify(input.readString());
              break;
            }
            case 24: {
              setPeriod(input.readInt64());
              break;
            }
          }
        }
      }
      
      
      // required string topic = 1;
      public boolean hasTopic() {
        return result.hasTopic();
      }
      public java.lang.String getTopic() {
        return result.getTopic();
      }
      public Builder setTopic(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasTopic = true;
        result.topic_ = value;
        return this;
      }
      public Builder clearTopic() {
        result.hasTopic = false;
        result.topic_ = getDefaultInstance().getTopic();
        return this;
      }
      
      // required string source_identify = 2;
      public boolean hasSourceIdentify() {
        return result.hasSourceIdentify();
      }
      public java.lang.String getSourceIdentify() {
        return result.getSourceIdentify();
      }
      public Builder setSourceIdentify(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSourceIdentify = true;
        result.sourceIdentify_ = value;
        return this;
      }
      public Builder clearSourceIdentify() {
        result.hasSourceIdentify = false;
        result.sourceIdentify_ = getDefaultInstance().getSourceIdentify();
        return this;
      }
      
      // required int64 period = 3;
      public boolean hasPeriod() {
        return result.hasPeriod();
      }
      public long getPeriod() {
        return result.getPeriod();
      }
      public Builder setPeriod(long value) {
        result.hasPeriod = true;
        result.period_ = value;
        return this;
      }
      public Builder clearPeriod() {
        result.hasPeriod = false;
        result.period_ = 0L;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:blackhole.RollClean)
    }
    
    static {
      defaultInstance = new RollClean(true);
      com.dp.blackhole.protocol.control.RollCleanPB.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:blackhole.RollClean)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_blackhole_RollClean_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_blackhole_RollClean_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017RollClean.proto\022\tblackhole\"C\n\tRollClea" +
      "n\022\r\n\005topic\030\001 \002(\t\022\027\n\017source_identify\030\002 \002(" +
      "\t\022\016\n\006period\030\003 \002(\003B0\n!com.dp.blackhole.pr" +
      "otocol.controlB\013RollCleanPB"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_blackhole_RollClean_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_blackhole_RollClean_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_blackhole_RollClean_descriptor,
              new java.lang.String[] { "Topic", "SourceIdentify", "Period", },
              com.dp.blackhole.protocol.control.RollCleanPB.RollClean.class,
              com.dp.blackhole.protocol.control.RollCleanPB.RollClean.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
