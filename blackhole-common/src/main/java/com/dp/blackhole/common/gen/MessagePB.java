// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

package com.dp.blackhole.common.gen;

public final class MessagePB {
  private MessagePB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface MessageOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .blackhole.Message.MessageType type = 1;
    /**
     * <code>required .blackhole.Message.MessageType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .blackhole.Message.MessageType type = 1;</code>
     */
    com.dp.blackhole.common.gen.MessagePB.Message.MessageType getType();

    // optional .blackhole.AppReg appReg = 2;
    /**
     * <code>optional .blackhole.AppReg appReg = 2;</code>
     */
    boolean hasAppReg();
    /**
     * <code>optional .blackhole.AppReg appReg = 2;</code>
     */
    com.dp.blackhole.common.gen.AppRegPB.AppReg getAppReg();
    /**
     * <code>optional .blackhole.AppReg appReg = 2;</code>
     */
    com.dp.blackhole.common.gen.AppRegPB.AppRegOrBuilder getAppRegOrBuilder();

    // optional .blackhole.AssignCollector assignCollector = 3;
    /**
     * <code>optional .blackhole.AssignCollector assignCollector = 3;</code>
     */
    boolean hasAssignCollector();
    /**
     * <code>optional .blackhole.AssignCollector assignCollector = 3;</code>
     */
    com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector getAssignCollector();
    /**
     * <code>optional .blackhole.AssignCollector assignCollector = 3;</code>
     */
    com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollectorOrBuilder getAssignCollectorOrBuilder();

    // optional .blackhole.AppRoll appRoll = 4;
    /**
     * <code>optional .blackhole.AppRoll appRoll = 4;</code>
     */
    boolean hasAppRoll();
    /**
     * <code>optional .blackhole.AppRoll appRoll = 4;</code>
     */
    com.dp.blackhole.common.gen.AppRollPB.AppRoll getAppRoll();
    /**
     * <code>optional .blackhole.AppRoll appRoll = 4;</code>
     */
    com.dp.blackhole.common.gen.AppRollPB.AppRollOrBuilder getAppRollOrBuilder();

    // optional .blackhole.RecoveryRoll recoveryRoll = 5;
    /**
     * <code>optional .blackhole.RecoveryRoll recoveryRoll = 5;</code>
     */
    boolean hasRecoveryRoll();
    /**
     * <code>optional .blackhole.RecoveryRoll recoveryRoll = 5;</code>
     */
    com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll getRecoveryRoll();
    /**
     * <code>optional .blackhole.RecoveryRoll recoveryRoll = 5;</code>
     */
    com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRollOrBuilder getRecoveryRollOrBuilder();

    // optional .blackhole.ReadyCollector readyCollector = 6;
    /**
     * <code>optional .blackhole.ReadyCollector readyCollector = 6;</code>
     */
    boolean hasReadyCollector();
    /**
     * <code>optional .blackhole.ReadyCollector readyCollector = 6;</code>
     */
    com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector getReadyCollector();
    /**
     * <code>optional .blackhole.ReadyCollector readyCollector = 6;</code>
     */
    com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollectorOrBuilder getReadyCollectorOrBuilder();

    // optional .blackhole.RollID rollID = 7;
    /**
     * <code>optional .blackhole.RollID rollID = 7;</code>
     */
    boolean hasRollID();
    /**
     * <code>optional .blackhole.RollID rollID = 7;</code>
     */
    com.dp.blackhole.common.gen.RollIDPB.RollID getRollID();
    /**
     * <code>optional .blackhole.RollID rollID = 7;</code>
     */
    com.dp.blackhole.common.gen.RollIDPB.RollIDOrBuilder getRollIDOrBuilder();

    // optional .blackhole.Failure failure = 8;
    /**
     * <code>optional .blackhole.Failure failure = 8;</code>
     */
    boolean hasFailure();
    /**
     * <code>optional .blackhole.Failure failure = 8;</code>
     */
    com.dp.blackhole.common.gen.FailurePB.Failure getFailure();
    /**
     * <code>optional .blackhole.Failure failure = 8;</code>
     */
    com.dp.blackhole.common.gen.FailurePB.FailureOrBuilder getFailureOrBuilder();

    // optional .blackhole.NoAvailableNode noAvailableNode = 9;
    /**
     * <code>optional .blackhole.NoAvailableNode noAvailableNode = 9;</code>
     */
    boolean hasNoAvailableNode();
    /**
     * <code>optional .blackhole.NoAvailableNode noAvailableNode = 9;</code>
     */
    com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode getNoAvailableNode();
    /**
     * <code>optional .blackhole.NoAvailableNode noAvailableNode = 9;</code>
     */
    com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNodeOrBuilder getNoAvailableNodeOrBuilder();

    // optional .blackhole.StreamID streamId = 10;
    /**
     * <code>optional .blackhole.StreamID streamId = 10;</code>
     */
    boolean hasStreamId();
    /**
     * <code>optional .blackhole.StreamID streamId = 10;</code>
     */
    com.dp.blackhole.common.gen.StreamIDPB.StreamID getStreamId();
    /**
     * <code>optional .blackhole.StreamID streamId = 10;</code>
     */
    com.dp.blackhole.common.gen.StreamIDPB.StreamIDOrBuilder getStreamIdOrBuilder();

    // optional .blackhole.ConfRes confRes = 11;
    /**
     * <code>optional .blackhole.ConfRes confRes = 11;</code>
     */
    boolean hasConfRes();
    /**
     * <code>optional .blackhole.ConfRes confRes = 11;</code>
     */
    com.dp.blackhole.common.gen.ConfResPB.ConfRes getConfRes();
    /**
     * <code>optional .blackhole.ConfRes confRes = 11;</code>
     */
    com.dp.blackhole.common.gen.ConfResPB.ConfResOrBuilder getConfResOrBuilder();

    // optional .blackhole.DumpReply dumpReply = 12;
    /**
     * <code>optional .blackhole.DumpReply dumpReply = 12;</code>
     */
    boolean hasDumpReply();
    /**
     * <code>optional .blackhole.DumpReply dumpReply = 12;</code>
     */
    com.dp.blackhole.common.gen.DumpReplyPB.DumpReply getDumpReply();
    /**
     * <code>optional .blackhole.DumpReply dumpReply = 12;</code>
     */
    com.dp.blackhole.common.gen.DumpReplyPB.DumpReplyOrBuilder getDumpReplyOrBuilder();

    // optional .blackhole.RemoveConf removeConf = 13;
    /**
     * <code>optional .blackhole.RemoveConf removeConf = 13;</code>
     */
    boolean hasRemoveConf();
    /**
     * <code>optional .blackhole.RemoveConf removeConf = 13;</code>
     */
    com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf getRemoveConf();
    /**
     * <code>optional .blackhole.RemoveConf removeConf = 13;</code>
     */
    com.dp.blackhole.common.gen.RemoveConfPB.RemoveConfOrBuilder getRemoveConfOrBuilder();

    // optional .blackhole.ColNodeReg colNodeReg = 14;
    /**
     * <code>optional .blackhole.ColNodeReg colNodeReg = 14;</code>
     */
    boolean hasColNodeReg();
    /**
     * <code>optional .blackhole.ColNodeReg colNodeReg = 14;</code>
     */
    com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg getColNodeReg();
    /**
     * <code>optional .blackhole.ColNodeReg colNodeReg = 14;</code>
     */
    com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeRegOrBuilder getColNodeRegOrBuilder();

    // optional .blackhole.DumpApp dumpApp = 15;
    /**
     * <code>optional .blackhole.DumpApp dumpApp = 15;</code>
     */
    boolean hasDumpApp();
    /**
     * <code>optional .blackhole.DumpApp dumpApp = 15;</code>
     */
    com.dp.blackhole.common.gen.DumpAppPB.DumpApp getDumpApp();
    /**
     * <code>optional .blackhole.DumpApp dumpApp = 15;</code>
     */
    com.dp.blackhole.common.gen.DumpAppPB.DumpAppOrBuilder getDumpAppOrBuilder();
  }
  /**
   * Protobuf type {@code blackhole.Message}
   */
  public static final class Message extends
      com.google.protobuf.GeneratedMessage
      implements MessageOrBuilder {
    // Use Message.newBuilder() to construct.
    private Message(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Message(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Message defaultInstance;
    public static Message getDefaultInstance() {
      return defaultInstance;
    }

    public Message getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Message(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.dp.blackhole.common.gen.MessagePB.Message.MessageType value = com.dp.blackhole.common.gen.MessagePB.Message.MessageType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              com.dp.blackhole.common.gen.AppRegPB.AppReg.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = appReg_.toBuilder();
              }
              appReg_ = input.readMessage(com.dp.blackhole.common.gen.AppRegPB.AppReg.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(appReg_);
                appReg_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = assignCollector_.toBuilder();
              }
              assignCollector_ = input.readMessage(com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(assignCollector_);
                assignCollector_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              com.dp.blackhole.common.gen.AppRollPB.AppRoll.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = appRoll_.toBuilder();
              }
              appRoll_ = input.readMessage(com.dp.blackhole.common.gen.AppRollPB.AppRoll.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(appRoll_);
                appRoll_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = recoveryRoll_.toBuilder();
              }
              recoveryRoll_ = input.readMessage(com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(recoveryRoll_);
                recoveryRoll_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = readyCollector_.toBuilder();
              }
              readyCollector_ = input.readMessage(com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(readyCollector_);
                readyCollector_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              com.dp.blackhole.common.gen.RollIDPB.RollID.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = rollID_.toBuilder();
              }
              rollID_ = input.readMessage(com.dp.blackhole.common.gen.RollIDPB.RollID.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rollID_);
                rollID_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              com.dp.blackhole.common.gen.FailurePB.Failure.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = failure_.toBuilder();
              }
              failure_ = input.readMessage(com.dp.blackhole.common.gen.FailurePB.Failure.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(failure_);
                failure_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = noAvailableNode_.toBuilder();
              }
              noAvailableNode_ = input.readMessage(com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(noAvailableNode_);
                noAvailableNode_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 82: {
              com.dp.blackhole.common.gen.StreamIDPB.StreamID.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = streamId_.toBuilder();
              }
              streamId_ = input.readMessage(com.dp.blackhole.common.gen.StreamIDPB.StreamID.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(streamId_);
                streamId_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 90: {
              com.dp.blackhole.common.gen.ConfResPB.ConfRes.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = confRes_.toBuilder();
              }
              confRes_ = input.readMessage(com.dp.blackhole.common.gen.ConfResPB.ConfRes.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(confRes_);
                confRes_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 98: {
              com.dp.blackhole.common.gen.DumpReplyPB.DumpReply.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = dumpReply_.toBuilder();
              }
              dumpReply_ = input.readMessage(com.dp.blackhole.common.gen.DumpReplyPB.DumpReply.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dumpReply_);
                dumpReply_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 106: {
              com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf.Builder subBuilder = null;
              if (((bitField0_ & 0x00001000) == 0x00001000)) {
                subBuilder = removeConf_.toBuilder();
              }
              removeConf_ = input.readMessage(com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(removeConf_);
                removeConf_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00001000;
              break;
            }
            case 114: {
              com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg.Builder subBuilder = null;
              if (((bitField0_ & 0x00002000) == 0x00002000)) {
                subBuilder = colNodeReg_.toBuilder();
              }
              colNodeReg_ = input.readMessage(com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(colNodeReg_);
                colNodeReg_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00002000;
              break;
            }
            case 122: {
              com.dp.blackhole.common.gen.DumpAppPB.DumpApp.Builder subBuilder = null;
              if (((bitField0_ & 0x00004000) == 0x00004000)) {
                subBuilder = dumpApp_.toBuilder();
              }
              dumpApp_ = input.readMessage(com.dp.blackhole.common.gen.DumpAppPB.DumpApp.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dumpApp_);
                dumpApp_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00004000;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dp.blackhole.common.gen.MessagePB.internal_static_blackhole_Message_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dp.blackhole.common.gen.MessagePB.internal_static_blackhole_Message_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dp.blackhole.common.gen.MessagePB.Message.class, com.dp.blackhole.common.gen.MessagePB.Message.Builder.class);
    }

    public static com.google.protobuf.Parser<Message> PARSER =
        new com.google.protobuf.AbstractParser<Message>() {
      public Message parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Message(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Message> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code blackhole.Message.MessageType}
     */
    public enum MessageType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>HEARTBEART = 1;</code>
       */
      HEARTBEART(0, 1),
      /**
       * <code>APP_REG = 2;</code>
       */
      APP_REG(1, 2),
      /**
       * <code>COLLECTOR_REG = 3;</code>
       */
      COLLECTOR_REG(2, 3),
      /**
       * <code>ASSIGN_COLLECTOR = 4;</code>
       */
      ASSIGN_COLLECTOR(3, 4),
      /**
       * <code>READY_COLLECTOR = 5;</code>
       */
      READY_COLLECTOR(4, 5),
      /**
       * <code>APP_ROLL = 6;</code>
       */
      APP_ROLL(5, 6),
      /**
       * <code>UPLOAD_ROLL = 7;</code>
       */
      UPLOAD_ROLL(6, 7),
      /**
       * <code>UPLOAD_SUCCESS = 8;</code>
       */
      UPLOAD_SUCCESS(7, 8),
      /**
       * <code>UPLOAD_FAIL = 9;</code>
       */
      UPLOAD_FAIL(8, 9),
      /**
       * <code>RECOVERY_ROLL = 10;</code>
       */
      RECOVERY_ROLL(9, 10),
      /**
       * <code>RECOVERY_SUCCESS = 11;</code>
       */
      RECOVERY_SUCCESS(10, 11),
      /**
       * <code>RECOVERY_FAIL = 12;</code>
       */
      RECOVERY_FAIL(11, 12),
      /**
       * <code>FAILURE = 13;</code>
       */
      FAILURE(12, 13),
      /**
       * <code>NOAVAILABLENODE = 14;</code>
       */
      NOAVAILABLENODE(13, 14),
      /**
       * <code>UNRECOVERABLE = 15;</code>
       */
      UNRECOVERABLE(14, 15),
      /**
       * <code>MANUAL_RECOVERY_ROLL = 16;</code>
       */
      MANUAL_RECOVERY_ROLL(15, 16),
      /**
       * <code>DUMPSTAT = 17;</code>
       */
      DUMPSTAT(16, 17),
      /**
       * <code>RETIRESTREAM = 18;</code>
       */
      RETIRESTREAM(17, 18),
      /**
       * <code>CONF_REQ = 19;</code>
       */
      CONF_REQ(18, 19),
      /**
       * <code>CONF_RES = 20;</code>
       */
      CONF_RES(19, 20),
      /**
       * <code>NOAVAILABLECONF = 21;</code>
       */
      NOAVAILABLECONF(20, 21),
      /**
       * <code>DUMPCONF = 22;</code>
       */
      DUMPCONF(21, 22),
      /**
       * <code>DUMPREPLY = 23;</code>
       */
      DUMPREPLY(22, 23),
      /**
       * <code>LISTAPPS = 24;</code>
       */
      LISTAPPS(23, 24),
      /**
       * <code>REMOVE_CONF = 25;</code>
       */
      REMOVE_CONF(24, 25),
      /**
       * <code>DUMP_APP = 26;</code>
       */
      DUMP_APP(25, 26),
      /**
       * <code>MAKR_UNRECOVERABLE = 27;</code>
       */
      MAKR_UNRECOVERABLE(26, 27),
      ;

      /**
       * <code>HEARTBEART = 1;</code>
       */
      public static final int HEARTBEART_VALUE = 1;
      /**
       * <code>APP_REG = 2;</code>
       */
      public static final int APP_REG_VALUE = 2;
      /**
       * <code>COLLECTOR_REG = 3;</code>
       */
      public static final int COLLECTOR_REG_VALUE = 3;
      /**
       * <code>ASSIGN_COLLECTOR = 4;</code>
       */
      public static final int ASSIGN_COLLECTOR_VALUE = 4;
      /**
       * <code>READY_COLLECTOR = 5;</code>
       */
      public static final int READY_COLLECTOR_VALUE = 5;
      /**
       * <code>APP_ROLL = 6;</code>
       */
      public static final int APP_ROLL_VALUE = 6;
      /**
       * <code>UPLOAD_ROLL = 7;</code>
       */
      public static final int UPLOAD_ROLL_VALUE = 7;
      /**
       * <code>UPLOAD_SUCCESS = 8;</code>
       */
      public static final int UPLOAD_SUCCESS_VALUE = 8;
      /**
       * <code>UPLOAD_FAIL = 9;</code>
       */
      public static final int UPLOAD_FAIL_VALUE = 9;
      /**
       * <code>RECOVERY_ROLL = 10;</code>
       */
      public static final int RECOVERY_ROLL_VALUE = 10;
      /**
       * <code>RECOVERY_SUCCESS = 11;</code>
       */
      public static final int RECOVERY_SUCCESS_VALUE = 11;
      /**
       * <code>RECOVERY_FAIL = 12;</code>
       */
      public static final int RECOVERY_FAIL_VALUE = 12;
      /**
       * <code>FAILURE = 13;</code>
       */
      public static final int FAILURE_VALUE = 13;
      /**
       * <code>NOAVAILABLENODE = 14;</code>
       */
      public static final int NOAVAILABLENODE_VALUE = 14;
      /**
       * <code>UNRECOVERABLE = 15;</code>
       */
      public static final int UNRECOVERABLE_VALUE = 15;
      /**
       * <code>MANUAL_RECOVERY_ROLL = 16;</code>
       */
      public static final int MANUAL_RECOVERY_ROLL_VALUE = 16;
      /**
       * <code>DUMPSTAT = 17;</code>
       */
      public static final int DUMPSTAT_VALUE = 17;
      /**
       * <code>RETIRESTREAM = 18;</code>
       */
      public static final int RETIRESTREAM_VALUE = 18;
      /**
       * <code>CONF_REQ = 19;</code>
       */
      public static final int CONF_REQ_VALUE = 19;
      /**
       * <code>CONF_RES = 20;</code>
       */
      public static final int CONF_RES_VALUE = 20;
      /**
       * <code>NOAVAILABLECONF = 21;</code>
       */
      public static final int NOAVAILABLECONF_VALUE = 21;
      /**
       * <code>DUMPCONF = 22;</code>
       */
      public static final int DUMPCONF_VALUE = 22;
      /**
       * <code>DUMPREPLY = 23;</code>
       */
      public static final int DUMPREPLY_VALUE = 23;
      /**
       * <code>LISTAPPS = 24;</code>
       */
      public static final int LISTAPPS_VALUE = 24;
      /**
       * <code>REMOVE_CONF = 25;</code>
       */
      public static final int REMOVE_CONF_VALUE = 25;
      /**
       * <code>DUMP_APP = 26;</code>
       */
      public static final int DUMP_APP_VALUE = 26;
      /**
       * <code>MAKR_UNRECOVERABLE = 27;</code>
       */
      public static final int MAKR_UNRECOVERABLE_VALUE = 27;


      public final int getNumber() { return value; }

      public static MessageType valueOf(int value) {
        switch (value) {
          case 1: return HEARTBEART;
          case 2: return APP_REG;
          case 3: return COLLECTOR_REG;
          case 4: return ASSIGN_COLLECTOR;
          case 5: return READY_COLLECTOR;
          case 6: return APP_ROLL;
          case 7: return UPLOAD_ROLL;
          case 8: return UPLOAD_SUCCESS;
          case 9: return UPLOAD_FAIL;
          case 10: return RECOVERY_ROLL;
          case 11: return RECOVERY_SUCCESS;
          case 12: return RECOVERY_FAIL;
          case 13: return FAILURE;
          case 14: return NOAVAILABLENODE;
          case 15: return UNRECOVERABLE;
          case 16: return MANUAL_RECOVERY_ROLL;
          case 17: return DUMPSTAT;
          case 18: return RETIRESTREAM;
          case 19: return CONF_REQ;
          case 20: return CONF_RES;
          case 21: return NOAVAILABLECONF;
          case 22: return DUMPCONF;
          case 23: return DUMPREPLY;
          case 24: return LISTAPPS;
          case 25: return REMOVE_CONF;
          case 26: return DUMP_APP;
          case 27: return MAKR_UNRECOVERABLE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<MessageType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<MessageType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MessageType>() {
              public MessageType findValueByNumber(int number) {
                return MessageType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.dp.blackhole.common.gen.MessagePB.Message.getDescriptor().getEnumTypes().get(0);
      }

      private static final MessageType[] VALUES = values();

      public static MessageType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private MessageType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:blackhole.Message.MessageType)
    }

    private int bitField0_;
    // required .blackhole.Message.MessageType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private com.dp.blackhole.common.gen.MessagePB.Message.MessageType type_;
    /**
     * <code>required .blackhole.Message.MessageType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .blackhole.Message.MessageType type = 1;</code>
     */
    public com.dp.blackhole.common.gen.MessagePB.Message.MessageType getType() {
      return type_;
    }

    // optional .blackhole.AppReg appReg = 2;
    public static final int APPREG_FIELD_NUMBER = 2;
    private com.dp.blackhole.common.gen.AppRegPB.AppReg appReg_;
    /**
     * <code>optional .blackhole.AppReg appReg = 2;</code>
     */
    public boolean hasAppReg() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .blackhole.AppReg appReg = 2;</code>
     */
    public com.dp.blackhole.common.gen.AppRegPB.AppReg getAppReg() {
      return appReg_;
    }
    /**
     * <code>optional .blackhole.AppReg appReg = 2;</code>
     */
    public com.dp.blackhole.common.gen.AppRegPB.AppRegOrBuilder getAppRegOrBuilder() {
      return appReg_;
    }

    // optional .blackhole.AssignCollector assignCollector = 3;
    public static final int ASSIGNCOLLECTOR_FIELD_NUMBER = 3;
    private com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector assignCollector_;
    /**
     * <code>optional .blackhole.AssignCollector assignCollector = 3;</code>
     */
    public boolean hasAssignCollector() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .blackhole.AssignCollector assignCollector = 3;</code>
     */
    public com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector getAssignCollector() {
      return assignCollector_;
    }
    /**
     * <code>optional .blackhole.AssignCollector assignCollector = 3;</code>
     */
    public com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollectorOrBuilder getAssignCollectorOrBuilder() {
      return assignCollector_;
    }

    // optional .blackhole.AppRoll appRoll = 4;
    public static final int APPROLL_FIELD_NUMBER = 4;
    private com.dp.blackhole.common.gen.AppRollPB.AppRoll appRoll_;
    /**
     * <code>optional .blackhole.AppRoll appRoll = 4;</code>
     */
    public boolean hasAppRoll() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .blackhole.AppRoll appRoll = 4;</code>
     */
    public com.dp.blackhole.common.gen.AppRollPB.AppRoll getAppRoll() {
      return appRoll_;
    }
    /**
     * <code>optional .blackhole.AppRoll appRoll = 4;</code>
     */
    public com.dp.blackhole.common.gen.AppRollPB.AppRollOrBuilder getAppRollOrBuilder() {
      return appRoll_;
    }

    // optional .blackhole.RecoveryRoll recoveryRoll = 5;
    public static final int RECOVERYROLL_FIELD_NUMBER = 5;
    private com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll recoveryRoll_;
    /**
     * <code>optional .blackhole.RecoveryRoll recoveryRoll = 5;</code>
     */
    public boolean hasRecoveryRoll() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .blackhole.RecoveryRoll recoveryRoll = 5;</code>
     */
    public com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll getRecoveryRoll() {
      return recoveryRoll_;
    }
    /**
     * <code>optional .blackhole.RecoveryRoll recoveryRoll = 5;</code>
     */
    public com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRollOrBuilder getRecoveryRollOrBuilder() {
      return recoveryRoll_;
    }

    // optional .blackhole.ReadyCollector readyCollector = 6;
    public static final int READYCOLLECTOR_FIELD_NUMBER = 6;
    private com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector readyCollector_;
    /**
     * <code>optional .blackhole.ReadyCollector readyCollector = 6;</code>
     */
    public boolean hasReadyCollector() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .blackhole.ReadyCollector readyCollector = 6;</code>
     */
    public com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector getReadyCollector() {
      return readyCollector_;
    }
    /**
     * <code>optional .blackhole.ReadyCollector readyCollector = 6;</code>
     */
    public com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollectorOrBuilder getReadyCollectorOrBuilder() {
      return readyCollector_;
    }

    // optional .blackhole.RollID rollID = 7;
    public static final int ROLLID_FIELD_NUMBER = 7;
    private com.dp.blackhole.common.gen.RollIDPB.RollID rollID_;
    /**
     * <code>optional .blackhole.RollID rollID = 7;</code>
     */
    public boolean hasRollID() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .blackhole.RollID rollID = 7;</code>
     */
    public com.dp.blackhole.common.gen.RollIDPB.RollID getRollID() {
      return rollID_;
    }
    /**
     * <code>optional .blackhole.RollID rollID = 7;</code>
     */
    public com.dp.blackhole.common.gen.RollIDPB.RollIDOrBuilder getRollIDOrBuilder() {
      return rollID_;
    }

    // optional .blackhole.Failure failure = 8;
    public static final int FAILURE_FIELD_NUMBER = 8;
    private com.dp.blackhole.common.gen.FailurePB.Failure failure_;
    /**
     * <code>optional .blackhole.Failure failure = 8;</code>
     */
    public boolean hasFailure() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .blackhole.Failure failure = 8;</code>
     */
    public com.dp.blackhole.common.gen.FailurePB.Failure getFailure() {
      return failure_;
    }
    /**
     * <code>optional .blackhole.Failure failure = 8;</code>
     */
    public com.dp.blackhole.common.gen.FailurePB.FailureOrBuilder getFailureOrBuilder() {
      return failure_;
    }

    // optional .blackhole.NoAvailableNode noAvailableNode = 9;
    public static final int NOAVAILABLENODE_FIELD_NUMBER = 9;
    private com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode noAvailableNode_;
    /**
     * <code>optional .blackhole.NoAvailableNode noAvailableNode = 9;</code>
     */
    public boolean hasNoAvailableNode() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .blackhole.NoAvailableNode noAvailableNode = 9;</code>
     */
    public com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode getNoAvailableNode() {
      return noAvailableNode_;
    }
    /**
     * <code>optional .blackhole.NoAvailableNode noAvailableNode = 9;</code>
     */
    public com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNodeOrBuilder getNoAvailableNodeOrBuilder() {
      return noAvailableNode_;
    }

    // optional .blackhole.StreamID streamId = 10;
    public static final int STREAMID_FIELD_NUMBER = 10;
    private com.dp.blackhole.common.gen.StreamIDPB.StreamID streamId_;
    /**
     * <code>optional .blackhole.StreamID streamId = 10;</code>
     */
    public boolean hasStreamId() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .blackhole.StreamID streamId = 10;</code>
     */
    public com.dp.blackhole.common.gen.StreamIDPB.StreamID getStreamId() {
      return streamId_;
    }
    /**
     * <code>optional .blackhole.StreamID streamId = 10;</code>
     */
    public com.dp.blackhole.common.gen.StreamIDPB.StreamIDOrBuilder getStreamIdOrBuilder() {
      return streamId_;
    }

    // optional .blackhole.ConfRes confRes = 11;
    public static final int CONFRES_FIELD_NUMBER = 11;
    private com.dp.blackhole.common.gen.ConfResPB.ConfRes confRes_;
    /**
     * <code>optional .blackhole.ConfRes confRes = 11;</code>
     */
    public boolean hasConfRes() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .blackhole.ConfRes confRes = 11;</code>
     */
    public com.dp.blackhole.common.gen.ConfResPB.ConfRes getConfRes() {
      return confRes_;
    }
    /**
     * <code>optional .blackhole.ConfRes confRes = 11;</code>
     */
    public com.dp.blackhole.common.gen.ConfResPB.ConfResOrBuilder getConfResOrBuilder() {
      return confRes_;
    }

    // optional .blackhole.DumpReply dumpReply = 12;
    public static final int DUMPREPLY_FIELD_NUMBER = 12;
    private com.dp.blackhole.common.gen.DumpReplyPB.DumpReply dumpReply_;
    /**
     * <code>optional .blackhole.DumpReply dumpReply = 12;</code>
     */
    public boolean hasDumpReply() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .blackhole.DumpReply dumpReply = 12;</code>
     */
    public com.dp.blackhole.common.gen.DumpReplyPB.DumpReply getDumpReply() {
      return dumpReply_;
    }
    /**
     * <code>optional .blackhole.DumpReply dumpReply = 12;</code>
     */
    public com.dp.blackhole.common.gen.DumpReplyPB.DumpReplyOrBuilder getDumpReplyOrBuilder() {
      return dumpReply_;
    }

    // optional .blackhole.RemoveConf removeConf = 13;
    public static final int REMOVECONF_FIELD_NUMBER = 13;
    private com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf removeConf_;
    /**
     * <code>optional .blackhole.RemoveConf removeConf = 13;</code>
     */
    public boolean hasRemoveConf() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .blackhole.RemoveConf removeConf = 13;</code>
     */
    public com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf getRemoveConf() {
      return removeConf_;
    }
    /**
     * <code>optional .blackhole.RemoveConf removeConf = 13;</code>
     */
    public com.dp.blackhole.common.gen.RemoveConfPB.RemoveConfOrBuilder getRemoveConfOrBuilder() {
      return removeConf_;
    }

    // optional .blackhole.ColNodeReg colNodeReg = 14;
    public static final int COLNODEREG_FIELD_NUMBER = 14;
    private com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg colNodeReg_;
    /**
     * <code>optional .blackhole.ColNodeReg colNodeReg = 14;</code>
     */
    public boolean hasColNodeReg() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional .blackhole.ColNodeReg colNodeReg = 14;</code>
     */
    public com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg getColNodeReg() {
      return colNodeReg_;
    }
    /**
     * <code>optional .blackhole.ColNodeReg colNodeReg = 14;</code>
     */
    public com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeRegOrBuilder getColNodeRegOrBuilder() {
      return colNodeReg_;
    }

    // optional .blackhole.DumpApp dumpApp = 15;
    public static final int DUMPAPP_FIELD_NUMBER = 15;
    private com.dp.blackhole.common.gen.DumpAppPB.DumpApp dumpApp_;
    /**
     * <code>optional .blackhole.DumpApp dumpApp = 15;</code>
     */
    public boolean hasDumpApp() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .blackhole.DumpApp dumpApp = 15;</code>
     */
    public com.dp.blackhole.common.gen.DumpAppPB.DumpApp getDumpApp() {
      return dumpApp_;
    }
    /**
     * <code>optional .blackhole.DumpApp dumpApp = 15;</code>
     */
    public com.dp.blackhole.common.gen.DumpAppPB.DumpAppOrBuilder getDumpAppOrBuilder() {
      return dumpApp_;
    }

    private void initFields() {
      type_ = com.dp.blackhole.common.gen.MessagePB.Message.MessageType.HEARTBEART;
      appReg_ = com.dp.blackhole.common.gen.AppRegPB.AppReg.getDefaultInstance();
      assignCollector_ = com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector.getDefaultInstance();
      appRoll_ = com.dp.blackhole.common.gen.AppRollPB.AppRoll.getDefaultInstance();
      recoveryRoll_ = com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll.getDefaultInstance();
      readyCollector_ = com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector.getDefaultInstance();
      rollID_ = com.dp.blackhole.common.gen.RollIDPB.RollID.getDefaultInstance();
      failure_ = com.dp.blackhole.common.gen.FailurePB.Failure.getDefaultInstance();
      noAvailableNode_ = com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode.getDefaultInstance();
      streamId_ = com.dp.blackhole.common.gen.StreamIDPB.StreamID.getDefaultInstance();
      confRes_ = com.dp.blackhole.common.gen.ConfResPB.ConfRes.getDefaultInstance();
      dumpReply_ = com.dp.blackhole.common.gen.DumpReplyPB.DumpReply.getDefaultInstance();
      removeConf_ = com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf.getDefaultInstance();
      colNodeReg_ = com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg.getDefaultInstance();
      dumpApp_ = com.dp.blackhole.common.gen.DumpAppPB.DumpApp.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasAppReg()) {
        if (!getAppReg().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasAssignCollector()) {
        if (!getAssignCollector().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasAppRoll()) {
        if (!getAppRoll().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRecoveryRoll()) {
        if (!getRecoveryRoll().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasReadyCollector()) {
        if (!getReadyCollector().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRollID()) {
        if (!getRollID().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasFailure()) {
        if (!getFailure().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasNoAvailableNode()) {
        if (!getNoAvailableNode().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasStreamId()) {
        if (!getStreamId().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasConfRes()) {
        if (!getConfRes().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasDumpReply()) {
        if (!getDumpReply().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRemoveConf()) {
        if (!getRemoveConf().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasColNodeReg()) {
        if (!getColNodeReg().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasDumpApp()) {
        if (!getDumpApp().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, appReg_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, assignCollector_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, appRoll_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, recoveryRoll_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, readyCollector_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, rollID_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, failure_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, noAvailableNode_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(10, streamId_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, confRes_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(12, dumpReply_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(13, removeConf_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(14, colNodeReg_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeMessage(15, dumpApp_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, appReg_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, assignCollector_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, appRoll_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, recoveryRoll_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, readyCollector_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, rollID_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, failure_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, noAvailableNode_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, streamId_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, confRes_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, dumpReply_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, removeConf_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, colNodeReg_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, dumpApp_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dp.blackhole.common.gen.MessagePB.Message parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dp.blackhole.common.gen.MessagePB.Message parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dp.blackhole.common.gen.MessagePB.Message parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dp.blackhole.common.gen.MessagePB.Message parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dp.blackhole.common.gen.MessagePB.Message parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dp.blackhole.common.gen.MessagePB.Message parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dp.blackhole.common.gen.MessagePB.Message parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dp.blackhole.common.gen.MessagePB.Message parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dp.blackhole.common.gen.MessagePB.Message parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dp.blackhole.common.gen.MessagePB.Message parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dp.blackhole.common.gen.MessagePB.Message prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code blackhole.Message}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.dp.blackhole.common.gen.MessagePB.MessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dp.blackhole.common.gen.MessagePB.internal_static_blackhole_Message_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dp.blackhole.common.gen.MessagePB.internal_static_blackhole_Message_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dp.blackhole.common.gen.MessagePB.Message.class, com.dp.blackhole.common.gen.MessagePB.Message.Builder.class);
      }

      // Construct using com.dp.blackhole.common.gen.MessagePB.Message.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAppRegFieldBuilder();
          getAssignCollectorFieldBuilder();
          getAppRollFieldBuilder();
          getRecoveryRollFieldBuilder();
          getReadyCollectorFieldBuilder();
          getRollIDFieldBuilder();
          getFailureFieldBuilder();
          getNoAvailableNodeFieldBuilder();
          getStreamIdFieldBuilder();
          getConfResFieldBuilder();
          getDumpReplyFieldBuilder();
          getRemoveConfFieldBuilder();
          getColNodeRegFieldBuilder();
          getDumpAppFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = com.dp.blackhole.common.gen.MessagePB.Message.MessageType.HEARTBEART;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (appRegBuilder_ == null) {
          appReg_ = com.dp.blackhole.common.gen.AppRegPB.AppReg.getDefaultInstance();
        } else {
          appRegBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (assignCollectorBuilder_ == null) {
          assignCollector_ = com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector.getDefaultInstance();
        } else {
          assignCollectorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (appRollBuilder_ == null) {
          appRoll_ = com.dp.blackhole.common.gen.AppRollPB.AppRoll.getDefaultInstance();
        } else {
          appRollBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (recoveryRollBuilder_ == null) {
          recoveryRoll_ = com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll.getDefaultInstance();
        } else {
          recoveryRollBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (readyCollectorBuilder_ == null) {
          readyCollector_ = com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector.getDefaultInstance();
        } else {
          readyCollectorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (rollIDBuilder_ == null) {
          rollID_ = com.dp.blackhole.common.gen.RollIDPB.RollID.getDefaultInstance();
        } else {
          rollIDBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (failureBuilder_ == null) {
          failure_ = com.dp.blackhole.common.gen.FailurePB.Failure.getDefaultInstance();
        } else {
          failureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (noAvailableNodeBuilder_ == null) {
          noAvailableNode_ = com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode.getDefaultInstance();
        } else {
          noAvailableNodeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (streamIdBuilder_ == null) {
          streamId_ = com.dp.blackhole.common.gen.StreamIDPB.StreamID.getDefaultInstance();
        } else {
          streamIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (confResBuilder_ == null) {
          confRes_ = com.dp.blackhole.common.gen.ConfResPB.ConfRes.getDefaultInstance();
        } else {
          confResBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (dumpReplyBuilder_ == null) {
          dumpReply_ = com.dp.blackhole.common.gen.DumpReplyPB.DumpReply.getDefaultInstance();
        } else {
          dumpReplyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (removeConfBuilder_ == null) {
          removeConf_ = com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf.getDefaultInstance();
        } else {
          removeConfBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (colNodeRegBuilder_ == null) {
          colNodeReg_ = com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg.getDefaultInstance();
        } else {
          colNodeRegBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        if (dumpAppBuilder_ == null) {
          dumpApp_ = com.dp.blackhole.common.gen.DumpAppPB.DumpApp.getDefaultInstance();
        } else {
          dumpAppBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dp.blackhole.common.gen.MessagePB.internal_static_blackhole_Message_descriptor;
      }

      public com.dp.blackhole.common.gen.MessagePB.Message getDefaultInstanceForType() {
        return com.dp.blackhole.common.gen.MessagePB.Message.getDefaultInstance();
      }

      public com.dp.blackhole.common.gen.MessagePB.Message build() {
        com.dp.blackhole.common.gen.MessagePB.Message result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dp.blackhole.common.gen.MessagePB.Message buildPartial() {
        com.dp.blackhole.common.gen.MessagePB.Message result = new com.dp.blackhole.common.gen.MessagePB.Message(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (appRegBuilder_ == null) {
          result.appReg_ = appReg_;
        } else {
          result.appReg_ = appRegBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (assignCollectorBuilder_ == null) {
          result.assignCollector_ = assignCollector_;
        } else {
          result.assignCollector_ = assignCollectorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (appRollBuilder_ == null) {
          result.appRoll_ = appRoll_;
        } else {
          result.appRoll_ = appRollBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (recoveryRollBuilder_ == null) {
          result.recoveryRoll_ = recoveryRoll_;
        } else {
          result.recoveryRoll_ = recoveryRollBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (readyCollectorBuilder_ == null) {
          result.readyCollector_ = readyCollector_;
        } else {
          result.readyCollector_ = readyCollectorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (rollIDBuilder_ == null) {
          result.rollID_ = rollID_;
        } else {
          result.rollID_ = rollIDBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (failureBuilder_ == null) {
          result.failure_ = failure_;
        } else {
          result.failure_ = failureBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (noAvailableNodeBuilder_ == null) {
          result.noAvailableNode_ = noAvailableNode_;
        } else {
          result.noAvailableNode_ = noAvailableNodeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        if (streamIdBuilder_ == null) {
          result.streamId_ = streamId_;
        } else {
          result.streamId_ = streamIdBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (confResBuilder_ == null) {
          result.confRes_ = confRes_;
        } else {
          result.confRes_ = confResBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        if (dumpReplyBuilder_ == null) {
          result.dumpReply_ = dumpReply_;
        } else {
          result.dumpReply_ = dumpReplyBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (removeConfBuilder_ == null) {
          result.removeConf_ = removeConf_;
        } else {
          result.removeConf_ = removeConfBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        if (colNodeRegBuilder_ == null) {
          result.colNodeReg_ = colNodeReg_;
        } else {
          result.colNodeReg_ = colNodeRegBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        if (dumpAppBuilder_ == null) {
          result.dumpApp_ = dumpApp_;
        } else {
          result.dumpApp_ = dumpAppBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dp.blackhole.common.gen.MessagePB.Message) {
          return mergeFrom((com.dp.blackhole.common.gen.MessagePB.Message)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dp.blackhole.common.gen.MessagePB.Message other) {
        if (other == com.dp.blackhole.common.gen.MessagePB.Message.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasAppReg()) {
          mergeAppReg(other.getAppReg());
        }
        if (other.hasAssignCollector()) {
          mergeAssignCollector(other.getAssignCollector());
        }
        if (other.hasAppRoll()) {
          mergeAppRoll(other.getAppRoll());
        }
        if (other.hasRecoveryRoll()) {
          mergeRecoveryRoll(other.getRecoveryRoll());
        }
        if (other.hasReadyCollector()) {
          mergeReadyCollector(other.getReadyCollector());
        }
        if (other.hasRollID()) {
          mergeRollID(other.getRollID());
        }
        if (other.hasFailure()) {
          mergeFailure(other.getFailure());
        }
        if (other.hasNoAvailableNode()) {
          mergeNoAvailableNode(other.getNoAvailableNode());
        }
        if (other.hasStreamId()) {
          mergeStreamId(other.getStreamId());
        }
        if (other.hasConfRes()) {
          mergeConfRes(other.getConfRes());
        }
        if (other.hasDumpReply()) {
          mergeDumpReply(other.getDumpReply());
        }
        if (other.hasRemoveConf()) {
          mergeRemoveConf(other.getRemoveConf());
        }
        if (other.hasColNodeReg()) {
          mergeColNodeReg(other.getColNodeReg());
        }
        if (other.hasDumpApp()) {
          mergeDumpApp(other.getDumpApp());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (hasAppReg()) {
          if (!getAppReg().isInitialized()) {
            
            return false;
          }
        }
        if (hasAssignCollector()) {
          if (!getAssignCollector().isInitialized()) {
            
            return false;
          }
        }
        if (hasAppRoll()) {
          if (!getAppRoll().isInitialized()) {
            
            return false;
          }
        }
        if (hasRecoveryRoll()) {
          if (!getRecoveryRoll().isInitialized()) {
            
            return false;
          }
        }
        if (hasReadyCollector()) {
          if (!getReadyCollector().isInitialized()) {
            
            return false;
          }
        }
        if (hasRollID()) {
          if (!getRollID().isInitialized()) {
            
            return false;
          }
        }
        if (hasFailure()) {
          if (!getFailure().isInitialized()) {
            
            return false;
          }
        }
        if (hasNoAvailableNode()) {
          if (!getNoAvailableNode().isInitialized()) {
            
            return false;
          }
        }
        if (hasStreamId()) {
          if (!getStreamId().isInitialized()) {
            
            return false;
          }
        }
        if (hasConfRes()) {
          if (!getConfRes().isInitialized()) {
            
            return false;
          }
        }
        if (hasDumpReply()) {
          if (!getDumpReply().isInitialized()) {
            
            return false;
          }
        }
        if (hasRemoveConf()) {
          if (!getRemoveConf().isInitialized()) {
            
            return false;
          }
        }
        if (hasColNodeReg()) {
          if (!getColNodeReg().isInitialized()) {
            
            return false;
          }
        }
        if (hasDumpApp()) {
          if (!getDumpApp().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dp.blackhole.common.gen.MessagePB.Message parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dp.blackhole.common.gen.MessagePB.Message) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .blackhole.Message.MessageType type = 1;
      private com.dp.blackhole.common.gen.MessagePB.Message.MessageType type_ = com.dp.blackhole.common.gen.MessagePB.Message.MessageType.HEARTBEART;
      /**
       * <code>required .blackhole.Message.MessageType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .blackhole.Message.MessageType type = 1;</code>
       */
      public com.dp.blackhole.common.gen.MessagePB.Message.MessageType getType() {
        return type_;
      }
      /**
       * <code>required .blackhole.Message.MessageType type = 1;</code>
       */
      public Builder setType(com.dp.blackhole.common.gen.MessagePB.Message.MessageType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .blackhole.Message.MessageType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.dp.blackhole.common.gen.MessagePB.Message.MessageType.HEARTBEART;
        onChanged();
        return this;
      }

      // optional .blackhole.AppReg appReg = 2;
      private com.dp.blackhole.common.gen.AppRegPB.AppReg appReg_ = com.dp.blackhole.common.gen.AppRegPB.AppReg.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.AppRegPB.AppReg, com.dp.blackhole.common.gen.AppRegPB.AppReg.Builder, com.dp.blackhole.common.gen.AppRegPB.AppRegOrBuilder> appRegBuilder_;
      /**
       * <code>optional .blackhole.AppReg appReg = 2;</code>
       */
      public boolean hasAppReg() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .blackhole.AppReg appReg = 2;</code>
       */
      public com.dp.blackhole.common.gen.AppRegPB.AppReg getAppReg() {
        if (appRegBuilder_ == null) {
          return appReg_;
        } else {
          return appRegBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .blackhole.AppReg appReg = 2;</code>
       */
      public Builder setAppReg(com.dp.blackhole.common.gen.AppRegPB.AppReg value) {
        if (appRegBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          appReg_ = value;
          onChanged();
        } else {
          appRegBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .blackhole.AppReg appReg = 2;</code>
       */
      public Builder setAppReg(
          com.dp.blackhole.common.gen.AppRegPB.AppReg.Builder builderForValue) {
        if (appRegBuilder_ == null) {
          appReg_ = builderForValue.build();
          onChanged();
        } else {
          appRegBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .blackhole.AppReg appReg = 2;</code>
       */
      public Builder mergeAppReg(com.dp.blackhole.common.gen.AppRegPB.AppReg value) {
        if (appRegBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              appReg_ != com.dp.blackhole.common.gen.AppRegPB.AppReg.getDefaultInstance()) {
            appReg_ =
              com.dp.blackhole.common.gen.AppRegPB.AppReg.newBuilder(appReg_).mergeFrom(value).buildPartial();
          } else {
            appReg_ = value;
          }
          onChanged();
        } else {
          appRegBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .blackhole.AppReg appReg = 2;</code>
       */
      public Builder clearAppReg() {
        if (appRegBuilder_ == null) {
          appReg_ = com.dp.blackhole.common.gen.AppRegPB.AppReg.getDefaultInstance();
          onChanged();
        } else {
          appRegBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .blackhole.AppReg appReg = 2;</code>
       */
      public com.dp.blackhole.common.gen.AppRegPB.AppReg.Builder getAppRegBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getAppRegFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blackhole.AppReg appReg = 2;</code>
       */
      public com.dp.blackhole.common.gen.AppRegPB.AppRegOrBuilder getAppRegOrBuilder() {
        if (appRegBuilder_ != null) {
          return appRegBuilder_.getMessageOrBuilder();
        } else {
          return appReg_;
        }
      }
      /**
       * <code>optional .blackhole.AppReg appReg = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.AppRegPB.AppReg, com.dp.blackhole.common.gen.AppRegPB.AppReg.Builder, com.dp.blackhole.common.gen.AppRegPB.AppRegOrBuilder> 
          getAppRegFieldBuilder() {
        if (appRegBuilder_ == null) {
          appRegBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.dp.blackhole.common.gen.AppRegPB.AppReg, com.dp.blackhole.common.gen.AppRegPB.AppReg.Builder, com.dp.blackhole.common.gen.AppRegPB.AppRegOrBuilder>(
                  appReg_,
                  getParentForChildren(),
                  isClean());
          appReg_ = null;
        }
        return appRegBuilder_;
      }

      // optional .blackhole.AssignCollector assignCollector = 3;
      private com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector assignCollector_ = com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector, com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector.Builder, com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollectorOrBuilder> assignCollectorBuilder_;
      /**
       * <code>optional .blackhole.AssignCollector assignCollector = 3;</code>
       */
      public boolean hasAssignCollector() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .blackhole.AssignCollector assignCollector = 3;</code>
       */
      public com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector getAssignCollector() {
        if (assignCollectorBuilder_ == null) {
          return assignCollector_;
        } else {
          return assignCollectorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .blackhole.AssignCollector assignCollector = 3;</code>
       */
      public Builder setAssignCollector(com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector value) {
        if (assignCollectorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          assignCollector_ = value;
          onChanged();
        } else {
          assignCollectorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .blackhole.AssignCollector assignCollector = 3;</code>
       */
      public Builder setAssignCollector(
          com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector.Builder builderForValue) {
        if (assignCollectorBuilder_ == null) {
          assignCollector_ = builderForValue.build();
          onChanged();
        } else {
          assignCollectorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .blackhole.AssignCollector assignCollector = 3;</code>
       */
      public Builder mergeAssignCollector(com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector value) {
        if (assignCollectorBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              assignCollector_ != com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector.getDefaultInstance()) {
            assignCollector_ =
              com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector.newBuilder(assignCollector_).mergeFrom(value).buildPartial();
          } else {
            assignCollector_ = value;
          }
          onChanged();
        } else {
          assignCollectorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .blackhole.AssignCollector assignCollector = 3;</code>
       */
      public Builder clearAssignCollector() {
        if (assignCollectorBuilder_ == null) {
          assignCollector_ = com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector.getDefaultInstance();
          onChanged();
        } else {
          assignCollectorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .blackhole.AssignCollector assignCollector = 3;</code>
       */
      public com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector.Builder getAssignCollectorBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getAssignCollectorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blackhole.AssignCollector assignCollector = 3;</code>
       */
      public com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollectorOrBuilder getAssignCollectorOrBuilder() {
        if (assignCollectorBuilder_ != null) {
          return assignCollectorBuilder_.getMessageOrBuilder();
        } else {
          return assignCollector_;
        }
      }
      /**
       * <code>optional .blackhole.AssignCollector assignCollector = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector, com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector.Builder, com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollectorOrBuilder> 
          getAssignCollectorFieldBuilder() {
        if (assignCollectorBuilder_ == null) {
          assignCollectorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector, com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollector.Builder, com.dp.blackhole.common.gen.AssignCollectorPB.AssignCollectorOrBuilder>(
                  assignCollector_,
                  getParentForChildren(),
                  isClean());
          assignCollector_ = null;
        }
        return assignCollectorBuilder_;
      }

      // optional .blackhole.AppRoll appRoll = 4;
      private com.dp.blackhole.common.gen.AppRollPB.AppRoll appRoll_ = com.dp.blackhole.common.gen.AppRollPB.AppRoll.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.AppRollPB.AppRoll, com.dp.blackhole.common.gen.AppRollPB.AppRoll.Builder, com.dp.blackhole.common.gen.AppRollPB.AppRollOrBuilder> appRollBuilder_;
      /**
       * <code>optional .blackhole.AppRoll appRoll = 4;</code>
       */
      public boolean hasAppRoll() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .blackhole.AppRoll appRoll = 4;</code>
       */
      public com.dp.blackhole.common.gen.AppRollPB.AppRoll getAppRoll() {
        if (appRollBuilder_ == null) {
          return appRoll_;
        } else {
          return appRollBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .blackhole.AppRoll appRoll = 4;</code>
       */
      public Builder setAppRoll(com.dp.blackhole.common.gen.AppRollPB.AppRoll value) {
        if (appRollBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          appRoll_ = value;
          onChanged();
        } else {
          appRollBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .blackhole.AppRoll appRoll = 4;</code>
       */
      public Builder setAppRoll(
          com.dp.blackhole.common.gen.AppRollPB.AppRoll.Builder builderForValue) {
        if (appRollBuilder_ == null) {
          appRoll_ = builderForValue.build();
          onChanged();
        } else {
          appRollBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .blackhole.AppRoll appRoll = 4;</code>
       */
      public Builder mergeAppRoll(com.dp.blackhole.common.gen.AppRollPB.AppRoll value) {
        if (appRollBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              appRoll_ != com.dp.blackhole.common.gen.AppRollPB.AppRoll.getDefaultInstance()) {
            appRoll_ =
              com.dp.blackhole.common.gen.AppRollPB.AppRoll.newBuilder(appRoll_).mergeFrom(value).buildPartial();
          } else {
            appRoll_ = value;
          }
          onChanged();
        } else {
          appRollBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .blackhole.AppRoll appRoll = 4;</code>
       */
      public Builder clearAppRoll() {
        if (appRollBuilder_ == null) {
          appRoll_ = com.dp.blackhole.common.gen.AppRollPB.AppRoll.getDefaultInstance();
          onChanged();
        } else {
          appRollBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .blackhole.AppRoll appRoll = 4;</code>
       */
      public com.dp.blackhole.common.gen.AppRollPB.AppRoll.Builder getAppRollBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getAppRollFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blackhole.AppRoll appRoll = 4;</code>
       */
      public com.dp.blackhole.common.gen.AppRollPB.AppRollOrBuilder getAppRollOrBuilder() {
        if (appRollBuilder_ != null) {
          return appRollBuilder_.getMessageOrBuilder();
        } else {
          return appRoll_;
        }
      }
      /**
       * <code>optional .blackhole.AppRoll appRoll = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.AppRollPB.AppRoll, com.dp.blackhole.common.gen.AppRollPB.AppRoll.Builder, com.dp.blackhole.common.gen.AppRollPB.AppRollOrBuilder> 
          getAppRollFieldBuilder() {
        if (appRollBuilder_ == null) {
          appRollBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.dp.blackhole.common.gen.AppRollPB.AppRoll, com.dp.blackhole.common.gen.AppRollPB.AppRoll.Builder, com.dp.blackhole.common.gen.AppRollPB.AppRollOrBuilder>(
                  appRoll_,
                  getParentForChildren(),
                  isClean());
          appRoll_ = null;
        }
        return appRollBuilder_;
      }

      // optional .blackhole.RecoveryRoll recoveryRoll = 5;
      private com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll recoveryRoll_ = com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll, com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll.Builder, com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRollOrBuilder> recoveryRollBuilder_;
      /**
       * <code>optional .blackhole.RecoveryRoll recoveryRoll = 5;</code>
       */
      public boolean hasRecoveryRoll() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .blackhole.RecoveryRoll recoveryRoll = 5;</code>
       */
      public com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll getRecoveryRoll() {
        if (recoveryRollBuilder_ == null) {
          return recoveryRoll_;
        } else {
          return recoveryRollBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .blackhole.RecoveryRoll recoveryRoll = 5;</code>
       */
      public Builder setRecoveryRoll(com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll value) {
        if (recoveryRollBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          recoveryRoll_ = value;
          onChanged();
        } else {
          recoveryRollBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .blackhole.RecoveryRoll recoveryRoll = 5;</code>
       */
      public Builder setRecoveryRoll(
          com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll.Builder builderForValue) {
        if (recoveryRollBuilder_ == null) {
          recoveryRoll_ = builderForValue.build();
          onChanged();
        } else {
          recoveryRollBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .blackhole.RecoveryRoll recoveryRoll = 5;</code>
       */
      public Builder mergeRecoveryRoll(com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll value) {
        if (recoveryRollBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              recoveryRoll_ != com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll.getDefaultInstance()) {
            recoveryRoll_ =
              com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll.newBuilder(recoveryRoll_).mergeFrom(value).buildPartial();
          } else {
            recoveryRoll_ = value;
          }
          onChanged();
        } else {
          recoveryRollBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .blackhole.RecoveryRoll recoveryRoll = 5;</code>
       */
      public Builder clearRecoveryRoll() {
        if (recoveryRollBuilder_ == null) {
          recoveryRoll_ = com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll.getDefaultInstance();
          onChanged();
        } else {
          recoveryRollBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .blackhole.RecoveryRoll recoveryRoll = 5;</code>
       */
      public com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll.Builder getRecoveryRollBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getRecoveryRollFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blackhole.RecoveryRoll recoveryRoll = 5;</code>
       */
      public com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRollOrBuilder getRecoveryRollOrBuilder() {
        if (recoveryRollBuilder_ != null) {
          return recoveryRollBuilder_.getMessageOrBuilder();
        } else {
          return recoveryRoll_;
        }
      }
      /**
       * <code>optional .blackhole.RecoveryRoll recoveryRoll = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll, com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll.Builder, com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRollOrBuilder> 
          getRecoveryRollFieldBuilder() {
        if (recoveryRollBuilder_ == null) {
          recoveryRollBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll, com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRoll.Builder, com.dp.blackhole.common.gen.RecoveryRollPB.RecoveryRollOrBuilder>(
                  recoveryRoll_,
                  getParentForChildren(),
                  isClean());
          recoveryRoll_ = null;
        }
        return recoveryRollBuilder_;
      }

      // optional .blackhole.ReadyCollector readyCollector = 6;
      private com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector readyCollector_ = com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector, com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector.Builder, com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollectorOrBuilder> readyCollectorBuilder_;
      /**
       * <code>optional .blackhole.ReadyCollector readyCollector = 6;</code>
       */
      public boolean hasReadyCollector() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .blackhole.ReadyCollector readyCollector = 6;</code>
       */
      public com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector getReadyCollector() {
        if (readyCollectorBuilder_ == null) {
          return readyCollector_;
        } else {
          return readyCollectorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .blackhole.ReadyCollector readyCollector = 6;</code>
       */
      public Builder setReadyCollector(com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector value) {
        if (readyCollectorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          readyCollector_ = value;
          onChanged();
        } else {
          readyCollectorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .blackhole.ReadyCollector readyCollector = 6;</code>
       */
      public Builder setReadyCollector(
          com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector.Builder builderForValue) {
        if (readyCollectorBuilder_ == null) {
          readyCollector_ = builderForValue.build();
          onChanged();
        } else {
          readyCollectorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .blackhole.ReadyCollector readyCollector = 6;</code>
       */
      public Builder mergeReadyCollector(com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector value) {
        if (readyCollectorBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              readyCollector_ != com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector.getDefaultInstance()) {
            readyCollector_ =
              com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector.newBuilder(readyCollector_).mergeFrom(value).buildPartial();
          } else {
            readyCollector_ = value;
          }
          onChanged();
        } else {
          readyCollectorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .blackhole.ReadyCollector readyCollector = 6;</code>
       */
      public Builder clearReadyCollector() {
        if (readyCollectorBuilder_ == null) {
          readyCollector_ = com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector.getDefaultInstance();
          onChanged();
        } else {
          readyCollectorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .blackhole.ReadyCollector readyCollector = 6;</code>
       */
      public com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector.Builder getReadyCollectorBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getReadyCollectorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blackhole.ReadyCollector readyCollector = 6;</code>
       */
      public com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollectorOrBuilder getReadyCollectorOrBuilder() {
        if (readyCollectorBuilder_ != null) {
          return readyCollectorBuilder_.getMessageOrBuilder();
        } else {
          return readyCollector_;
        }
      }
      /**
       * <code>optional .blackhole.ReadyCollector readyCollector = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector, com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector.Builder, com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollectorOrBuilder> 
          getReadyCollectorFieldBuilder() {
        if (readyCollectorBuilder_ == null) {
          readyCollectorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector, com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollector.Builder, com.dp.blackhole.common.gen.ReadyCollectorPB.ReadyCollectorOrBuilder>(
                  readyCollector_,
                  getParentForChildren(),
                  isClean());
          readyCollector_ = null;
        }
        return readyCollectorBuilder_;
      }

      // optional .blackhole.RollID rollID = 7;
      private com.dp.blackhole.common.gen.RollIDPB.RollID rollID_ = com.dp.blackhole.common.gen.RollIDPB.RollID.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.RollIDPB.RollID, com.dp.blackhole.common.gen.RollIDPB.RollID.Builder, com.dp.blackhole.common.gen.RollIDPB.RollIDOrBuilder> rollIDBuilder_;
      /**
       * <code>optional .blackhole.RollID rollID = 7;</code>
       */
      public boolean hasRollID() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .blackhole.RollID rollID = 7;</code>
       */
      public com.dp.blackhole.common.gen.RollIDPB.RollID getRollID() {
        if (rollIDBuilder_ == null) {
          return rollID_;
        } else {
          return rollIDBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .blackhole.RollID rollID = 7;</code>
       */
      public Builder setRollID(com.dp.blackhole.common.gen.RollIDPB.RollID value) {
        if (rollIDBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          rollID_ = value;
          onChanged();
        } else {
          rollIDBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .blackhole.RollID rollID = 7;</code>
       */
      public Builder setRollID(
          com.dp.blackhole.common.gen.RollIDPB.RollID.Builder builderForValue) {
        if (rollIDBuilder_ == null) {
          rollID_ = builderForValue.build();
          onChanged();
        } else {
          rollIDBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .blackhole.RollID rollID = 7;</code>
       */
      public Builder mergeRollID(com.dp.blackhole.common.gen.RollIDPB.RollID value) {
        if (rollIDBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              rollID_ != com.dp.blackhole.common.gen.RollIDPB.RollID.getDefaultInstance()) {
            rollID_ =
              com.dp.blackhole.common.gen.RollIDPB.RollID.newBuilder(rollID_).mergeFrom(value).buildPartial();
          } else {
            rollID_ = value;
          }
          onChanged();
        } else {
          rollIDBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .blackhole.RollID rollID = 7;</code>
       */
      public Builder clearRollID() {
        if (rollIDBuilder_ == null) {
          rollID_ = com.dp.blackhole.common.gen.RollIDPB.RollID.getDefaultInstance();
          onChanged();
        } else {
          rollIDBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .blackhole.RollID rollID = 7;</code>
       */
      public com.dp.blackhole.common.gen.RollIDPB.RollID.Builder getRollIDBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getRollIDFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blackhole.RollID rollID = 7;</code>
       */
      public com.dp.blackhole.common.gen.RollIDPB.RollIDOrBuilder getRollIDOrBuilder() {
        if (rollIDBuilder_ != null) {
          return rollIDBuilder_.getMessageOrBuilder();
        } else {
          return rollID_;
        }
      }
      /**
       * <code>optional .blackhole.RollID rollID = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.RollIDPB.RollID, com.dp.blackhole.common.gen.RollIDPB.RollID.Builder, com.dp.blackhole.common.gen.RollIDPB.RollIDOrBuilder> 
          getRollIDFieldBuilder() {
        if (rollIDBuilder_ == null) {
          rollIDBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.dp.blackhole.common.gen.RollIDPB.RollID, com.dp.blackhole.common.gen.RollIDPB.RollID.Builder, com.dp.blackhole.common.gen.RollIDPB.RollIDOrBuilder>(
                  rollID_,
                  getParentForChildren(),
                  isClean());
          rollID_ = null;
        }
        return rollIDBuilder_;
      }

      // optional .blackhole.Failure failure = 8;
      private com.dp.blackhole.common.gen.FailurePB.Failure failure_ = com.dp.blackhole.common.gen.FailurePB.Failure.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.FailurePB.Failure, com.dp.blackhole.common.gen.FailurePB.Failure.Builder, com.dp.blackhole.common.gen.FailurePB.FailureOrBuilder> failureBuilder_;
      /**
       * <code>optional .blackhole.Failure failure = 8;</code>
       */
      public boolean hasFailure() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .blackhole.Failure failure = 8;</code>
       */
      public com.dp.blackhole.common.gen.FailurePB.Failure getFailure() {
        if (failureBuilder_ == null) {
          return failure_;
        } else {
          return failureBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .blackhole.Failure failure = 8;</code>
       */
      public Builder setFailure(com.dp.blackhole.common.gen.FailurePB.Failure value) {
        if (failureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          failure_ = value;
          onChanged();
        } else {
          failureBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .blackhole.Failure failure = 8;</code>
       */
      public Builder setFailure(
          com.dp.blackhole.common.gen.FailurePB.Failure.Builder builderForValue) {
        if (failureBuilder_ == null) {
          failure_ = builderForValue.build();
          onChanged();
        } else {
          failureBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .blackhole.Failure failure = 8;</code>
       */
      public Builder mergeFailure(com.dp.blackhole.common.gen.FailurePB.Failure value) {
        if (failureBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              failure_ != com.dp.blackhole.common.gen.FailurePB.Failure.getDefaultInstance()) {
            failure_ =
              com.dp.blackhole.common.gen.FailurePB.Failure.newBuilder(failure_).mergeFrom(value).buildPartial();
          } else {
            failure_ = value;
          }
          onChanged();
        } else {
          failureBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .blackhole.Failure failure = 8;</code>
       */
      public Builder clearFailure() {
        if (failureBuilder_ == null) {
          failure_ = com.dp.blackhole.common.gen.FailurePB.Failure.getDefaultInstance();
          onChanged();
        } else {
          failureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .blackhole.Failure failure = 8;</code>
       */
      public com.dp.blackhole.common.gen.FailurePB.Failure.Builder getFailureBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getFailureFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blackhole.Failure failure = 8;</code>
       */
      public com.dp.blackhole.common.gen.FailurePB.FailureOrBuilder getFailureOrBuilder() {
        if (failureBuilder_ != null) {
          return failureBuilder_.getMessageOrBuilder();
        } else {
          return failure_;
        }
      }
      /**
       * <code>optional .blackhole.Failure failure = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.FailurePB.Failure, com.dp.blackhole.common.gen.FailurePB.Failure.Builder, com.dp.blackhole.common.gen.FailurePB.FailureOrBuilder> 
          getFailureFieldBuilder() {
        if (failureBuilder_ == null) {
          failureBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.dp.blackhole.common.gen.FailurePB.Failure, com.dp.blackhole.common.gen.FailurePB.Failure.Builder, com.dp.blackhole.common.gen.FailurePB.FailureOrBuilder>(
                  failure_,
                  getParentForChildren(),
                  isClean());
          failure_ = null;
        }
        return failureBuilder_;
      }

      // optional .blackhole.NoAvailableNode noAvailableNode = 9;
      private com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode noAvailableNode_ = com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode, com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode.Builder, com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNodeOrBuilder> noAvailableNodeBuilder_;
      /**
       * <code>optional .blackhole.NoAvailableNode noAvailableNode = 9;</code>
       */
      public boolean hasNoAvailableNode() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .blackhole.NoAvailableNode noAvailableNode = 9;</code>
       */
      public com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode getNoAvailableNode() {
        if (noAvailableNodeBuilder_ == null) {
          return noAvailableNode_;
        } else {
          return noAvailableNodeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .blackhole.NoAvailableNode noAvailableNode = 9;</code>
       */
      public Builder setNoAvailableNode(com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode value) {
        if (noAvailableNodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          noAvailableNode_ = value;
          onChanged();
        } else {
          noAvailableNodeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .blackhole.NoAvailableNode noAvailableNode = 9;</code>
       */
      public Builder setNoAvailableNode(
          com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode.Builder builderForValue) {
        if (noAvailableNodeBuilder_ == null) {
          noAvailableNode_ = builderForValue.build();
          onChanged();
        } else {
          noAvailableNodeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .blackhole.NoAvailableNode noAvailableNode = 9;</code>
       */
      public Builder mergeNoAvailableNode(com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode value) {
        if (noAvailableNodeBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              noAvailableNode_ != com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode.getDefaultInstance()) {
            noAvailableNode_ =
              com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode.newBuilder(noAvailableNode_).mergeFrom(value).buildPartial();
          } else {
            noAvailableNode_ = value;
          }
          onChanged();
        } else {
          noAvailableNodeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .blackhole.NoAvailableNode noAvailableNode = 9;</code>
       */
      public Builder clearNoAvailableNode() {
        if (noAvailableNodeBuilder_ == null) {
          noAvailableNode_ = com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode.getDefaultInstance();
          onChanged();
        } else {
          noAvailableNodeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .blackhole.NoAvailableNode noAvailableNode = 9;</code>
       */
      public com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode.Builder getNoAvailableNodeBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getNoAvailableNodeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blackhole.NoAvailableNode noAvailableNode = 9;</code>
       */
      public com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNodeOrBuilder getNoAvailableNodeOrBuilder() {
        if (noAvailableNodeBuilder_ != null) {
          return noAvailableNodeBuilder_.getMessageOrBuilder();
        } else {
          return noAvailableNode_;
        }
      }
      /**
       * <code>optional .blackhole.NoAvailableNode noAvailableNode = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode, com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode.Builder, com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNodeOrBuilder> 
          getNoAvailableNodeFieldBuilder() {
        if (noAvailableNodeBuilder_ == null) {
          noAvailableNodeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode, com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNode.Builder, com.dp.blackhole.common.gen.NoAvailableNodePB.NoAvailableNodeOrBuilder>(
                  noAvailableNode_,
                  getParentForChildren(),
                  isClean());
          noAvailableNode_ = null;
        }
        return noAvailableNodeBuilder_;
      }

      // optional .blackhole.StreamID streamId = 10;
      private com.dp.blackhole.common.gen.StreamIDPB.StreamID streamId_ = com.dp.blackhole.common.gen.StreamIDPB.StreamID.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.StreamIDPB.StreamID, com.dp.blackhole.common.gen.StreamIDPB.StreamID.Builder, com.dp.blackhole.common.gen.StreamIDPB.StreamIDOrBuilder> streamIdBuilder_;
      /**
       * <code>optional .blackhole.StreamID streamId = 10;</code>
       */
      public boolean hasStreamId() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .blackhole.StreamID streamId = 10;</code>
       */
      public com.dp.blackhole.common.gen.StreamIDPB.StreamID getStreamId() {
        if (streamIdBuilder_ == null) {
          return streamId_;
        } else {
          return streamIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .blackhole.StreamID streamId = 10;</code>
       */
      public Builder setStreamId(com.dp.blackhole.common.gen.StreamIDPB.StreamID value) {
        if (streamIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          streamId_ = value;
          onChanged();
        } else {
          streamIdBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .blackhole.StreamID streamId = 10;</code>
       */
      public Builder setStreamId(
          com.dp.blackhole.common.gen.StreamIDPB.StreamID.Builder builderForValue) {
        if (streamIdBuilder_ == null) {
          streamId_ = builderForValue.build();
          onChanged();
        } else {
          streamIdBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .blackhole.StreamID streamId = 10;</code>
       */
      public Builder mergeStreamId(com.dp.blackhole.common.gen.StreamIDPB.StreamID value) {
        if (streamIdBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              streamId_ != com.dp.blackhole.common.gen.StreamIDPB.StreamID.getDefaultInstance()) {
            streamId_ =
              com.dp.blackhole.common.gen.StreamIDPB.StreamID.newBuilder(streamId_).mergeFrom(value).buildPartial();
          } else {
            streamId_ = value;
          }
          onChanged();
        } else {
          streamIdBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .blackhole.StreamID streamId = 10;</code>
       */
      public Builder clearStreamId() {
        if (streamIdBuilder_ == null) {
          streamId_ = com.dp.blackhole.common.gen.StreamIDPB.StreamID.getDefaultInstance();
          onChanged();
        } else {
          streamIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .blackhole.StreamID streamId = 10;</code>
       */
      public com.dp.blackhole.common.gen.StreamIDPB.StreamID.Builder getStreamIdBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getStreamIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blackhole.StreamID streamId = 10;</code>
       */
      public com.dp.blackhole.common.gen.StreamIDPB.StreamIDOrBuilder getStreamIdOrBuilder() {
        if (streamIdBuilder_ != null) {
          return streamIdBuilder_.getMessageOrBuilder();
        } else {
          return streamId_;
        }
      }
      /**
       * <code>optional .blackhole.StreamID streamId = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.StreamIDPB.StreamID, com.dp.blackhole.common.gen.StreamIDPB.StreamID.Builder, com.dp.blackhole.common.gen.StreamIDPB.StreamIDOrBuilder> 
          getStreamIdFieldBuilder() {
        if (streamIdBuilder_ == null) {
          streamIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.dp.blackhole.common.gen.StreamIDPB.StreamID, com.dp.blackhole.common.gen.StreamIDPB.StreamID.Builder, com.dp.blackhole.common.gen.StreamIDPB.StreamIDOrBuilder>(
                  streamId_,
                  getParentForChildren(),
                  isClean());
          streamId_ = null;
        }
        return streamIdBuilder_;
      }

      // optional .blackhole.ConfRes confRes = 11;
      private com.dp.blackhole.common.gen.ConfResPB.ConfRes confRes_ = com.dp.blackhole.common.gen.ConfResPB.ConfRes.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.ConfResPB.ConfRes, com.dp.blackhole.common.gen.ConfResPB.ConfRes.Builder, com.dp.blackhole.common.gen.ConfResPB.ConfResOrBuilder> confResBuilder_;
      /**
       * <code>optional .blackhole.ConfRes confRes = 11;</code>
       */
      public boolean hasConfRes() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .blackhole.ConfRes confRes = 11;</code>
       */
      public com.dp.blackhole.common.gen.ConfResPB.ConfRes getConfRes() {
        if (confResBuilder_ == null) {
          return confRes_;
        } else {
          return confResBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .blackhole.ConfRes confRes = 11;</code>
       */
      public Builder setConfRes(com.dp.blackhole.common.gen.ConfResPB.ConfRes value) {
        if (confResBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          confRes_ = value;
          onChanged();
        } else {
          confResBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .blackhole.ConfRes confRes = 11;</code>
       */
      public Builder setConfRes(
          com.dp.blackhole.common.gen.ConfResPB.ConfRes.Builder builderForValue) {
        if (confResBuilder_ == null) {
          confRes_ = builderForValue.build();
          onChanged();
        } else {
          confResBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .blackhole.ConfRes confRes = 11;</code>
       */
      public Builder mergeConfRes(com.dp.blackhole.common.gen.ConfResPB.ConfRes value) {
        if (confResBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              confRes_ != com.dp.blackhole.common.gen.ConfResPB.ConfRes.getDefaultInstance()) {
            confRes_ =
              com.dp.blackhole.common.gen.ConfResPB.ConfRes.newBuilder(confRes_).mergeFrom(value).buildPartial();
          } else {
            confRes_ = value;
          }
          onChanged();
        } else {
          confResBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .blackhole.ConfRes confRes = 11;</code>
       */
      public Builder clearConfRes() {
        if (confResBuilder_ == null) {
          confRes_ = com.dp.blackhole.common.gen.ConfResPB.ConfRes.getDefaultInstance();
          onChanged();
        } else {
          confResBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .blackhole.ConfRes confRes = 11;</code>
       */
      public com.dp.blackhole.common.gen.ConfResPB.ConfRes.Builder getConfResBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getConfResFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blackhole.ConfRes confRes = 11;</code>
       */
      public com.dp.blackhole.common.gen.ConfResPB.ConfResOrBuilder getConfResOrBuilder() {
        if (confResBuilder_ != null) {
          return confResBuilder_.getMessageOrBuilder();
        } else {
          return confRes_;
        }
      }
      /**
       * <code>optional .blackhole.ConfRes confRes = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.ConfResPB.ConfRes, com.dp.blackhole.common.gen.ConfResPB.ConfRes.Builder, com.dp.blackhole.common.gen.ConfResPB.ConfResOrBuilder> 
          getConfResFieldBuilder() {
        if (confResBuilder_ == null) {
          confResBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.dp.blackhole.common.gen.ConfResPB.ConfRes, com.dp.blackhole.common.gen.ConfResPB.ConfRes.Builder, com.dp.blackhole.common.gen.ConfResPB.ConfResOrBuilder>(
                  confRes_,
                  getParentForChildren(),
                  isClean());
          confRes_ = null;
        }
        return confResBuilder_;
      }

      // optional .blackhole.DumpReply dumpReply = 12;
      private com.dp.blackhole.common.gen.DumpReplyPB.DumpReply dumpReply_ = com.dp.blackhole.common.gen.DumpReplyPB.DumpReply.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.DumpReplyPB.DumpReply, com.dp.blackhole.common.gen.DumpReplyPB.DumpReply.Builder, com.dp.blackhole.common.gen.DumpReplyPB.DumpReplyOrBuilder> dumpReplyBuilder_;
      /**
       * <code>optional .blackhole.DumpReply dumpReply = 12;</code>
       */
      public boolean hasDumpReply() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .blackhole.DumpReply dumpReply = 12;</code>
       */
      public com.dp.blackhole.common.gen.DumpReplyPB.DumpReply getDumpReply() {
        if (dumpReplyBuilder_ == null) {
          return dumpReply_;
        } else {
          return dumpReplyBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .blackhole.DumpReply dumpReply = 12;</code>
       */
      public Builder setDumpReply(com.dp.blackhole.common.gen.DumpReplyPB.DumpReply value) {
        if (dumpReplyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dumpReply_ = value;
          onChanged();
        } else {
          dumpReplyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .blackhole.DumpReply dumpReply = 12;</code>
       */
      public Builder setDumpReply(
          com.dp.blackhole.common.gen.DumpReplyPB.DumpReply.Builder builderForValue) {
        if (dumpReplyBuilder_ == null) {
          dumpReply_ = builderForValue.build();
          onChanged();
        } else {
          dumpReplyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .blackhole.DumpReply dumpReply = 12;</code>
       */
      public Builder mergeDumpReply(com.dp.blackhole.common.gen.DumpReplyPB.DumpReply value) {
        if (dumpReplyBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              dumpReply_ != com.dp.blackhole.common.gen.DumpReplyPB.DumpReply.getDefaultInstance()) {
            dumpReply_ =
              com.dp.blackhole.common.gen.DumpReplyPB.DumpReply.newBuilder(dumpReply_).mergeFrom(value).buildPartial();
          } else {
            dumpReply_ = value;
          }
          onChanged();
        } else {
          dumpReplyBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .blackhole.DumpReply dumpReply = 12;</code>
       */
      public Builder clearDumpReply() {
        if (dumpReplyBuilder_ == null) {
          dumpReply_ = com.dp.blackhole.common.gen.DumpReplyPB.DumpReply.getDefaultInstance();
          onChanged();
        } else {
          dumpReplyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .blackhole.DumpReply dumpReply = 12;</code>
       */
      public com.dp.blackhole.common.gen.DumpReplyPB.DumpReply.Builder getDumpReplyBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getDumpReplyFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blackhole.DumpReply dumpReply = 12;</code>
       */
      public com.dp.blackhole.common.gen.DumpReplyPB.DumpReplyOrBuilder getDumpReplyOrBuilder() {
        if (dumpReplyBuilder_ != null) {
          return dumpReplyBuilder_.getMessageOrBuilder();
        } else {
          return dumpReply_;
        }
      }
      /**
       * <code>optional .blackhole.DumpReply dumpReply = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.DumpReplyPB.DumpReply, com.dp.blackhole.common.gen.DumpReplyPB.DumpReply.Builder, com.dp.blackhole.common.gen.DumpReplyPB.DumpReplyOrBuilder> 
          getDumpReplyFieldBuilder() {
        if (dumpReplyBuilder_ == null) {
          dumpReplyBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.dp.blackhole.common.gen.DumpReplyPB.DumpReply, com.dp.blackhole.common.gen.DumpReplyPB.DumpReply.Builder, com.dp.blackhole.common.gen.DumpReplyPB.DumpReplyOrBuilder>(
                  dumpReply_,
                  getParentForChildren(),
                  isClean());
          dumpReply_ = null;
        }
        return dumpReplyBuilder_;
      }

      // optional .blackhole.RemoveConf removeConf = 13;
      private com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf removeConf_ = com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf, com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf.Builder, com.dp.blackhole.common.gen.RemoveConfPB.RemoveConfOrBuilder> removeConfBuilder_;
      /**
       * <code>optional .blackhole.RemoveConf removeConf = 13;</code>
       */
      public boolean hasRemoveConf() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .blackhole.RemoveConf removeConf = 13;</code>
       */
      public com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf getRemoveConf() {
        if (removeConfBuilder_ == null) {
          return removeConf_;
        } else {
          return removeConfBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .blackhole.RemoveConf removeConf = 13;</code>
       */
      public Builder setRemoveConf(com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf value) {
        if (removeConfBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          removeConf_ = value;
          onChanged();
        } else {
          removeConfBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .blackhole.RemoveConf removeConf = 13;</code>
       */
      public Builder setRemoveConf(
          com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf.Builder builderForValue) {
        if (removeConfBuilder_ == null) {
          removeConf_ = builderForValue.build();
          onChanged();
        } else {
          removeConfBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .blackhole.RemoveConf removeConf = 13;</code>
       */
      public Builder mergeRemoveConf(com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf value) {
        if (removeConfBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              removeConf_ != com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf.getDefaultInstance()) {
            removeConf_ =
              com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf.newBuilder(removeConf_).mergeFrom(value).buildPartial();
          } else {
            removeConf_ = value;
          }
          onChanged();
        } else {
          removeConfBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .blackhole.RemoveConf removeConf = 13;</code>
       */
      public Builder clearRemoveConf() {
        if (removeConfBuilder_ == null) {
          removeConf_ = com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf.getDefaultInstance();
          onChanged();
        } else {
          removeConfBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <code>optional .blackhole.RemoveConf removeConf = 13;</code>
       */
      public com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf.Builder getRemoveConfBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getRemoveConfFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blackhole.RemoveConf removeConf = 13;</code>
       */
      public com.dp.blackhole.common.gen.RemoveConfPB.RemoveConfOrBuilder getRemoveConfOrBuilder() {
        if (removeConfBuilder_ != null) {
          return removeConfBuilder_.getMessageOrBuilder();
        } else {
          return removeConf_;
        }
      }
      /**
       * <code>optional .blackhole.RemoveConf removeConf = 13;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf, com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf.Builder, com.dp.blackhole.common.gen.RemoveConfPB.RemoveConfOrBuilder> 
          getRemoveConfFieldBuilder() {
        if (removeConfBuilder_ == null) {
          removeConfBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf, com.dp.blackhole.common.gen.RemoveConfPB.RemoveConf.Builder, com.dp.blackhole.common.gen.RemoveConfPB.RemoveConfOrBuilder>(
                  removeConf_,
                  getParentForChildren(),
                  isClean());
          removeConf_ = null;
        }
        return removeConfBuilder_;
      }

      // optional .blackhole.ColNodeReg colNodeReg = 14;
      private com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg colNodeReg_ = com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg, com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg.Builder, com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeRegOrBuilder> colNodeRegBuilder_;
      /**
       * <code>optional .blackhole.ColNodeReg colNodeReg = 14;</code>
       */
      public boolean hasColNodeReg() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .blackhole.ColNodeReg colNodeReg = 14;</code>
       */
      public com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg getColNodeReg() {
        if (colNodeRegBuilder_ == null) {
          return colNodeReg_;
        } else {
          return colNodeRegBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .blackhole.ColNodeReg colNodeReg = 14;</code>
       */
      public Builder setColNodeReg(com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg value) {
        if (colNodeRegBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          colNodeReg_ = value;
          onChanged();
        } else {
          colNodeRegBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .blackhole.ColNodeReg colNodeReg = 14;</code>
       */
      public Builder setColNodeReg(
          com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg.Builder builderForValue) {
        if (colNodeRegBuilder_ == null) {
          colNodeReg_ = builderForValue.build();
          onChanged();
        } else {
          colNodeRegBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .blackhole.ColNodeReg colNodeReg = 14;</code>
       */
      public Builder mergeColNodeReg(com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg value) {
        if (colNodeRegBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              colNodeReg_ != com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg.getDefaultInstance()) {
            colNodeReg_ =
              com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg.newBuilder(colNodeReg_).mergeFrom(value).buildPartial();
          } else {
            colNodeReg_ = value;
          }
          onChanged();
        } else {
          colNodeRegBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .blackhole.ColNodeReg colNodeReg = 14;</code>
       */
      public Builder clearColNodeReg() {
        if (colNodeRegBuilder_ == null) {
          colNodeReg_ = com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg.getDefaultInstance();
          onChanged();
        } else {
          colNodeRegBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .blackhole.ColNodeReg colNodeReg = 14;</code>
       */
      public com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg.Builder getColNodeRegBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getColNodeRegFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blackhole.ColNodeReg colNodeReg = 14;</code>
       */
      public com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeRegOrBuilder getColNodeRegOrBuilder() {
        if (colNodeRegBuilder_ != null) {
          return colNodeRegBuilder_.getMessageOrBuilder();
        } else {
          return colNodeReg_;
        }
      }
      /**
       * <code>optional .blackhole.ColNodeReg colNodeReg = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg, com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg.Builder, com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeRegOrBuilder> 
          getColNodeRegFieldBuilder() {
        if (colNodeRegBuilder_ == null) {
          colNodeRegBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg, com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeReg.Builder, com.dp.blackhole.common.gen.ColNodeRegPB.ColNodeRegOrBuilder>(
                  colNodeReg_,
                  getParentForChildren(),
                  isClean());
          colNodeReg_ = null;
        }
        return colNodeRegBuilder_;
      }

      // optional .blackhole.DumpApp dumpApp = 15;
      private com.dp.blackhole.common.gen.DumpAppPB.DumpApp dumpApp_ = com.dp.blackhole.common.gen.DumpAppPB.DumpApp.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.DumpAppPB.DumpApp, com.dp.blackhole.common.gen.DumpAppPB.DumpApp.Builder, com.dp.blackhole.common.gen.DumpAppPB.DumpAppOrBuilder> dumpAppBuilder_;
      /**
       * <code>optional .blackhole.DumpApp dumpApp = 15;</code>
       */
      public boolean hasDumpApp() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .blackhole.DumpApp dumpApp = 15;</code>
       */
      public com.dp.blackhole.common.gen.DumpAppPB.DumpApp getDumpApp() {
        if (dumpAppBuilder_ == null) {
          return dumpApp_;
        } else {
          return dumpAppBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .blackhole.DumpApp dumpApp = 15;</code>
       */
      public Builder setDumpApp(com.dp.blackhole.common.gen.DumpAppPB.DumpApp value) {
        if (dumpAppBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dumpApp_ = value;
          onChanged();
        } else {
          dumpAppBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .blackhole.DumpApp dumpApp = 15;</code>
       */
      public Builder setDumpApp(
          com.dp.blackhole.common.gen.DumpAppPB.DumpApp.Builder builderForValue) {
        if (dumpAppBuilder_ == null) {
          dumpApp_ = builderForValue.build();
          onChanged();
        } else {
          dumpAppBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .blackhole.DumpApp dumpApp = 15;</code>
       */
      public Builder mergeDumpApp(com.dp.blackhole.common.gen.DumpAppPB.DumpApp value) {
        if (dumpAppBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000) &&
              dumpApp_ != com.dp.blackhole.common.gen.DumpAppPB.DumpApp.getDefaultInstance()) {
            dumpApp_ =
              com.dp.blackhole.common.gen.DumpAppPB.DumpApp.newBuilder(dumpApp_).mergeFrom(value).buildPartial();
          } else {
            dumpApp_ = value;
          }
          onChanged();
        } else {
          dumpAppBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .blackhole.DumpApp dumpApp = 15;</code>
       */
      public Builder clearDumpApp() {
        if (dumpAppBuilder_ == null) {
          dumpApp_ = com.dp.blackhole.common.gen.DumpAppPB.DumpApp.getDefaultInstance();
          onChanged();
        } else {
          dumpAppBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }
      /**
       * <code>optional .blackhole.DumpApp dumpApp = 15;</code>
       */
      public com.dp.blackhole.common.gen.DumpAppPB.DumpApp.Builder getDumpAppBuilder() {
        bitField0_ |= 0x00004000;
        onChanged();
        return getDumpAppFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blackhole.DumpApp dumpApp = 15;</code>
       */
      public com.dp.blackhole.common.gen.DumpAppPB.DumpAppOrBuilder getDumpAppOrBuilder() {
        if (dumpAppBuilder_ != null) {
          return dumpAppBuilder_.getMessageOrBuilder();
        } else {
          return dumpApp_;
        }
      }
      /**
       * <code>optional .blackhole.DumpApp dumpApp = 15;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.dp.blackhole.common.gen.DumpAppPB.DumpApp, com.dp.blackhole.common.gen.DumpAppPB.DumpApp.Builder, com.dp.blackhole.common.gen.DumpAppPB.DumpAppOrBuilder> 
          getDumpAppFieldBuilder() {
        if (dumpAppBuilder_ == null) {
          dumpAppBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.dp.blackhole.common.gen.DumpAppPB.DumpApp, com.dp.blackhole.common.gen.DumpAppPB.DumpApp.Builder, com.dp.blackhole.common.gen.DumpAppPB.DumpAppOrBuilder>(
                  dumpApp_,
                  getParentForChildren(),
                  isClean());
          dumpApp_ = null;
        }
        return dumpAppBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:blackhole.Message)
    }

    static {
      defaultInstance = new Message(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:blackhole.Message)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_blackhole_Message_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_blackhole_Message_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rMessage.proto\022\tblackhole\032\014AppReg.proto" +
      "\032\025AssignCollector.proto\032\rAppRoll.proto\032\022" +
      "RecoveryRoll.proto\032\024ReadyCollector.proto" +
      "\032\014RollID.proto\032\rFailure.proto\032\025NoAvailab" +
      "leNode.proto\032\016StreamID.proto\032\rConfRes.pr" +
      "oto\032\017DumpReply.proto\032\020RemoveConf.proto\032\020" +
      "ColNodeReg.proto\032\rDumpApp.proto\"\360\010\n\007Mess" +
      "age\022,\n\004type\030\001 \002(\0162\036.blackhole.Message.Me" +
      "ssageType\022!\n\006appReg\030\002 \001(\0132\021.blackhole.Ap" +
      "pReg\0223\n\017assignCollector\030\003 \001(\0132\032.blackhol",
      "e.AssignCollector\022#\n\007appRoll\030\004 \001(\0132\022.bla" +
      "ckhole.AppRoll\022-\n\014recoveryRoll\030\005 \001(\0132\027.b" +
      "lackhole.RecoveryRoll\0221\n\016readyCollector\030" +
      "\006 \001(\0132\031.blackhole.ReadyCollector\022!\n\006roll" +
      "ID\030\007 \001(\0132\021.blackhole.RollID\022#\n\007failure\030\010" +
      " \001(\0132\022.blackhole.Failure\0223\n\017noAvailableN" +
      "ode\030\t \001(\0132\032.blackhole.NoAvailableNode\022%\n" +
      "\010streamId\030\n \001(\0132\023.blackhole.StreamID\022#\n\007" +
      "confRes\030\013 \001(\0132\022.blackhole.ConfRes\022\'\n\tdum" +
      "pReply\030\014 \001(\0132\024.blackhole.DumpReply\022)\n\nre",
      "moveConf\030\r \001(\0132\025.blackhole.RemoveConf\022)\n" +
      "\ncolNodeReg\030\016 \001(\0132\025.blackhole.ColNodeReg" +
      "\022#\n\007dumpApp\030\017 \001(\0132\022.blackhole.DumpApp\"\352\003" +
      "\n\013MessageType\022\016\n\nHEARTBEART\020\001\022\013\n\007APP_REG" +
      "\020\002\022\021\n\rCOLLECTOR_REG\020\003\022\024\n\020ASSIGN_COLLECTO" +
      "R\020\004\022\023\n\017READY_COLLECTOR\020\005\022\014\n\010APP_ROLL\020\006\022\017" +
      "\n\013UPLOAD_ROLL\020\007\022\022\n\016UPLOAD_SUCCESS\020\010\022\017\n\013U" +
      "PLOAD_FAIL\020\t\022\021\n\rRECOVERY_ROLL\020\n\022\024\n\020RECOV" +
      "ERY_SUCCESS\020\013\022\021\n\rRECOVERY_FAIL\020\014\022\013\n\007FAIL" +
      "URE\020\r\022\023\n\017NOAVAILABLENODE\020\016\022\021\n\rUNRECOVERA",
      "BLE\020\017\022\030\n\024MANUAL_RECOVERY_ROLL\020\020\022\014\n\010DUMPS" +
      "TAT\020\021\022\020\n\014RETIRESTREAM\020\022\022\014\n\010CONF_REQ\020\023\022\014\n" +
      "\010CONF_RES\020\024\022\023\n\017NOAVAILABLECONF\020\025\022\014\n\010DUMP" +
      "CONF\020\026\022\r\n\tDUMPREPLY\020\027\022\014\n\010LISTAPPS\020\030\022\017\n\013R" +
      "EMOVE_CONF\020\031\022\014\n\010DUMP_APP\020\032\022\026\n\022MAKR_UNREC" +
      "OVERABLE\020\033B(\n\033com.dp.blackhole.common.ge" +
      "nB\tMessagePB"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_blackhole_Message_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_blackhole_Message_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_blackhole_Message_descriptor,
              new java.lang.String[] { "Type", "AppReg", "AssignCollector", "AppRoll", "RecoveryRoll", "ReadyCollector", "RollID", "Failure", "NoAvailableNode", "StreamId", "ConfRes", "DumpReply", "RemoveConf", "ColNodeReg", "DumpApp", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.dp.blackhole.common.gen.AppRegPB.getDescriptor(),
          com.dp.blackhole.common.gen.AssignCollectorPB.getDescriptor(),
          com.dp.blackhole.common.gen.AppRollPB.getDescriptor(),
          com.dp.blackhole.common.gen.RecoveryRollPB.getDescriptor(),
          com.dp.blackhole.common.gen.ReadyCollectorPB.getDescriptor(),
          com.dp.blackhole.common.gen.RollIDPB.getDescriptor(),
          com.dp.blackhole.common.gen.FailurePB.getDescriptor(),
          com.dp.blackhole.common.gen.NoAvailableNodePB.getDescriptor(),
          com.dp.blackhole.common.gen.StreamIDPB.getDescriptor(),
          com.dp.blackhole.common.gen.ConfResPB.getDescriptor(),
          com.dp.blackhole.common.gen.DumpReplyPB.getDescriptor(),
          com.dp.blackhole.common.gen.RemoveConfPB.getDescriptor(),
          com.dp.blackhole.common.gen.ColNodeRegPB.getDescriptor(),
          com.dp.blackhole.common.gen.DumpAppPB.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
